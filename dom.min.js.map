{"version":3,"file":"dom.min.js","sources":["utils/lang/toString.js","utils/types/isFunction.js","utils/types/isObject.js","utils/types/isElement.js","utils/types/isString.js","utils/enum.js","getAttribute.js","setAttribute.js","removeAttribute.js","utils/types/isArray.js","getAttributes.js","utils/lang/hasOwn.js","setAttributes.js","getValue.js","setValue.js","hasClass.js","addClass.js","utils/string/trim.js","removeClass.js","utils/types/isUndefined.js","utils/string/toCamel.js","getStyle.js","utils/types/tags.js","utils/types/isHTML.js","utils/string/stripScripts.js","utils/types/isHTMLCollection.js","utils/types/isFragment.js","utils/types/isTextNode.js","utils/types/isDOM.js","text.js","createElement.js","html.js","attributes/index.js","removeAttributes.js","replaceClass.js","toggleClass.js","attrs.js","enable.js","disable.js","readonly.js","val.js","build.js","clone.js","_isAncestor.js","inDocument.js","canPosition.js","matches.js","getHostOrParent.js","utils/types/isBoolean.js","getEl.js","isCollection.js","filter.js","getOffsetParent.js","getScrollParent.js","getURLSearchParams.js","getPreviousSibling.js","getPreviousSiblings.js","getNextSibling.js","getNextSiblings.js","getSiblings.js","getViewportHeight.js","getViewportWidth.js","isMatched.js","siblings.js","isText.js","utils/types/isNumber.js","pixel.js","toURLSearchParams.js","base/index.js","copyToClipboard.js","createAndDownloadFile.js","closest.js","contains.js","byClass.js","byId.js","find.js","findAll.js","has.js","getURLProps.js","_getURLPattern.js","getURLSearchParamByName.js","index.js","inBounding.js","inViewport.js","children.js","openURL.js","parent.js","serialize.js","toREM.js","toPixels.js","_HSLToRGB.js","toHex.js","toRGB.js","color/index.js","getColor.js","toHSL.js","insertAfter.js","insertBefore.js","_insertAdjacentHTML.js","utils/string/encodeHTML.js","insertHTMLAfterEnd.js","insertHTMLBeforeBegin.js","insertHTMLBeforeEnd.js","before.js","setStyle.js","hide.js","replace.js","remove.js","show.js","insertion/index.js","insertHTMLAfterBegin.js","append.js","prepend.js","after.js","unwrap.js","wrap.js","wrapAll.js","wrapInner.js","platform/index.js","isBrowser.js","isDeno.js","isNode.js","isMobile.js","isWebKit.js","browser.js","os.js","getOffsetLeft.js","getOffsetTop.js","getOffset.js","getDocumentScrollLeft.js","getPageX.js","getDocumentScrollTop.js","getPageY.js","getPageXY.js","getScrollLeft.js","getScrollTop.js","getScrollTotalLeft.js","getScrollTotalTop.js","offset.js","utils/lang/easeInQuad.js","position/index.js","getScroll.js","getScrollTotal.js","positions.js","scrollTo.js","getNextSiblingBy.js","getPreviousSiblingBy.js","sibling/index.js","next.js","prev.js","nextBy.js","prevBy.js","nextAll.js","prevAll.js","_getElementSizes.js","innerHeight.js","innerWidth.js","outerHeight.js","outerWidth.js","size/index.js","getDocumentHeight.js","getDocumentWidth.js","getScreenHeight.js","getScreenWidth.js","getScrollbarWidth.js","height.js","width.js","sizes.js","getStyles.js","setStyles.js","getProperty.js","setProperty.js","style/index.js","injectCSS.js","css.js","prop.js","toggle.js","dom.js","types/index.js"],"sourcesContent":["/**\n * Object 对象原型上的 toString 方法\n * ========================================================================\n * @method toString\n * @param {*} val\n * @returns {string}\n */\nconst toString = (val) => {\n  return Object.prototype.toString.apply(val)\n}\n\nexport default toString\n","import toString from '../lang/toString'\n\n/**\n * 检测测试数据是否为 Function 类型\n * ========================================================================\n * @method isFunction\n * @param {*} val - （必须）待检测的数据\n * @returns {boolean} 'val' 是 Function 类型返回 true，否则返回 false\n */\nconst isFunction = (val) => {\n  return typeof val === 'function' || toString(val) === '[object Function]'\n}\n\nexport default isFunction\n","import toString from '../lang/toString'\nimport isFunction from './isFunction'\n\n/**\n * 检测数据是否为 Object 类型\n * ========================================================================\n * @method isObject\n * @param {*} o\n * @returns {boolean}\n */\nconst isObject = (o) => {\n  return (\n    (toString(o) === '[object Object]' ||\n      typeof o === 'object' ||\n      isFunction(o)) &&\n    o !== null\n  )\n}\n\nexport default isObject\n","import isObject from './isObject'\n\n/**\n * 检测数据是否为 HTMLElement DOM 节点\n * ========================================================================\n * @method isElement\n * @param {*} o\n * @returns {boolean}\n */\nconst isElement = (o) => {\n  return !!(isObject(o) && o.nodeName && o.tagName && o.nodeType === 1)\n}\n\nexport default isElement\n","/**\n * 检测数据是否为 String 类型\n * ========================================================================\n * @method isArray\n * @param {*} str\n * @returns {boolean}\n */\nconst isString = (str) => {\n  return typeof str === 'string'\n}\n\nexport default isString\n","export const KEYWORDS = {\r\n  black: '000',\r\n  silver: 'c0c0c0',\r\n  gray: '808080',\r\n  white: 'fff',\r\n  maroon: '800000',\r\n  red: 'f00',\r\n  purple: '800080',\r\n  fuchsia: 'f0f',\r\n  green: '008000',\r\n  lime: '0f0',\r\n  olive: '808000',\r\n  yellow: 'ff0',\r\n  navy: '000080',\r\n  blue: '00f',\r\n  teal: '008080',\r\n  aqua: '0ff'\r\n}\r\n\r\nexport const COLOR_PROPS = [\r\n  'accent-color',\r\n  'background-color',\r\n  'border-color',\r\n  'border-bottom-color',\r\n  'border-left-color',\r\n  'border-right-color',\r\n  'border-top-color',\r\n  'color',\r\n  'outline-color',\r\n  'text-decoration-color'\r\n]\r\n\r\nexport const FROM_ELEMENT_TAGS = [\r\n  'input',\r\n  'textarea',\r\n  'checkbox',\r\n  'radio',\r\n  'select',\r\n  'datalist',\r\n  'option',\r\n  'output'\r\n]\r\n\r\nexport const DISABLE_TAGS = [\r\n  'button',\r\n  'command',\r\n  'fieldset',\r\n  'optgroup',\r\n  'option',\r\n  'select',\r\n  'textarea',\r\n  'input'\r\n]\r\n\r\nexport const READONLY_INPUT_TYPES = [\r\n  'text',\r\n  'search',\r\n  'url',\r\n  'tel',\r\n  'email',\r\n  'password',\r\n  'date',\r\n  'month',\r\n  'week',\r\n  'time',\r\n  'datetime-local',\r\n  'number'\r\n]\r\n\r\nexport const REG_RGB = /^rgb\\((\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\)$/i\r\nexport const REG_HEX = /^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})$/i\r\nexport const REG_HEX3 = /([0-9A-F])/gi\r\nexport const REG_HSL = /^hsl\\((\\d+)\\s*,\\s*(\\d+)%\\s*,\\s*(\\d+)%\\)$/i\r\n","import isElement from './isElement'\r\nimport isString from './utils/types/isString'\r\nimport { FROM_ELEMENT_TAGS } from './utils/enum'\r\n\r\n/**\r\n * 获取 DOM 元素的某个 HTML 属性的值\r\n * ========================================================================\r\n * @method getAttribute\r\n * @param {HTMLElement} el\r\n * @param {String} attr\r\n * @return {String|Boolean}\r\n */\r\nconst getAttribute = (el, attr) => {\r\n  let tagName\r\n\r\n  if (!isElement(el) || !isString(attr)) {\r\n    return false\r\n  }\r\n\r\n  tagName = el.tagName.toLowerCase()\r\n\r\n  switch (attr) {\r\n    case 'className':\r\n      return el.getAttribute('class')\r\n    case 'htmlFor':\r\n      return el.getAttribute('for')\r\n    case 'style':\r\n      return el.style.cssText\r\n    case 'value':\r\n      if (FROM_ELEMENT_TAGS.indexOf(tagName) > -1) {\r\n        return el.value\r\n      } else {\r\n        return el.getAttribute(attr)\r\n      }\r\n    default:\r\n      return el.getAttribute(attr)\r\n  }\r\n}\r\n\r\nexport default getAttribute\r\n","import isElement from './isElement'\nimport { FROM_ELEMENT_TAGS } from './utils/enum'\n\n/**\n * 给 DOM 节点设置属性/值\n * ========================================================================\n * @method setAttribute\n * @param {HTMLElement} el - DOM 节点\n * @param {String} attr - 属性名称\n * @param {String|Number|Boolean} value - 属性值\n */\nconst setAttribute = (el, attr, value) => {\n  let tagName\n\n  if (!isElement(el)) {\n    return false\n  }\n\n  tagName = el.tagName.toLowerCase()\n\n  switch (attr) {\n    case 'className':\n      el.className = value\n      break\n    case 'htmlFor':\n      el.setAttribute('for', value)\n      break\n    case 'style':\n      el.style.cssText = value\n      break\n    case 'value':\n      if (FROM_ELEMENT_TAGS.indexOf(tagName) > -1) {\n        el.value = value\n      } else {\n        el.setAttribute(attr, value)\n      }\n      break\n    case 'innerText':\n      el.innerText = value\n      break\n    case 'innerHTML':\n      el.innerHTML = value\n      break\n    default:\n      el.setAttribute(attr, value)\n      break\n  }\n}\n\nexport default setAttribute\n","import isString from './utils/types/isString'\r\nimport isElement from './isElement'\r\n\r\n/**\r\n * 移除 DOM 元素的 DOM 属性值\r\n * ========================================================================\r\n * @method removeAttribute\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/removeAttribute\r\n * @param {HTMLElement} el\r\n * @param {String} attr\r\n */\r\nconst removeAttribute = (el, attr) => {\r\n  let tagName\r\n\r\n  if (!isElement(el) || !isString(attr)) {\r\n    return false\r\n  }\r\n\r\n  tagName = el.tagName.toLowerCase()\r\n\r\n  switch (attr) {\r\n    case 'className':\r\n      el.removeAttribute('class')\r\n      break\r\n    case 'htmlFor':\r\n      el.removeAttribute('for')\r\n      break\r\n    case 'value':\r\n      if (tagName === 'input' || tagName === 'textarea') {\r\n        el.value = ''\r\n      } else {\r\n        el.removeAttribute(attr)\r\n      }\r\n      break\r\n    default:\r\n      el.removeAttribute(attr)\r\n      break\r\n  }\r\n}\r\n\r\nexport default removeAttribute\r\n","import toString from '../lang/toString'\n\n/**\n * 检测数据是否为 Array 类型\n * ========================================================================\n * @method isArray\n * @param {*} o\n * @returns {boolean}\n */\nconst isArray = (o) => {\n  if (Array.isArray) {\n    return Array.isArray(o)\n  } else {\n    return toString(o) === '[object Array]'\n  }\n}\n\nexport default isArray\n","import isArray from './utils/types/isArray'\r\nimport isElement from './isElement'\r\nimport getAttribute from './getAttribute'\r\n\r\n/**\r\n * 获取 DOM 元素的单个或多个 HTML 属性值（键/值对象）\r\n * ========================================================================\r\n * @method getAttributes\r\n * @param {HTMLElement} el\r\n * @param {Array} [props]\r\n * @return {Object|Boolean}\r\n */\r\nconst getAttributes = (el, props = []) => {\r\n  const attrs = {}\r\n  let keys = [...props]\r\n\r\n  if (!isElement(el)) {\r\n    return false\r\n  }\r\n\r\n  if (!isArray(keys) || keys.length < 1) {\r\n    keys = el.getAttributeNames()\r\n  }\r\n\r\n  keys.forEach((key) => {\r\n    const value = getAttribute(el, key)\r\n\r\n    /* istanbul ignore else */\r\n    if (value) {\r\n      attrs[key] = value\r\n    }\r\n  })\r\n\r\n  return attrs\r\n}\r\n\r\nexport default getAttributes\r\n","/**\n * 检测对象自身属性中是否具有指定的属性。\n * ========================================================================\n * @method hasOwn\n * @param {Object} obj - （必须）检测的目标对象\n * @param {String} prop - （必须）属性名\n * @returns {Boolean}\n */\nconst hasOwn = (obj, prop) => {\n  const hasOwnProperty = Object.prototype.hasOwnProperty\n  return obj && hasOwnProperty.call(obj, prop)\n}\n\nexport default hasOwn\n","import isObject from './utils/types/isObject'\nimport hasOwn from './utils/lang/hasOwn'\nimport setAttribute from './setAttribute'\n\n/**\n * 给 DOM 元素一次设置多个 DOM 属性/值\n * ========================================================================\n * @method setAttributes\n * @param {HTMLElement} el\n * @param {Object} attrs\n * @return {boolean}\n */\nconst setAttributes = (el, attrs) => {\n  if (!el || !isObject(attrs)) {\n    return false\n  }\n\n  Object.keys(attrs).forEach((attr) => {\n    const value = attrs[attr]\n\n    /* istanbul ignore else */\n    if (hasOwn(attrs, attr)) {\n      setAttribute(el, attr, value)\n    }\n  })\n}\n\nexport default setAttributes\n","import isElement from './isElement'\r\nimport getAttribute from './getAttribute'\r\nimport { FROM_ELEMENT_TAGS } from './utils/enum'\r\n\r\n/**\r\n * 获取 DOM （表单）元素的 value 属性值\r\n * ========================================================================\r\n * @method getValue\r\n * @since 0.5.0\r\n * @param {HTMLElement} el\r\n * @return {String}\r\n */\r\nconst getValue = (el) => {\r\n  if (\r\n    !isElement(el) ||\r\n    FROM_ELEMENT_TAGS.indexOf(el.tagName.toLowerCase()) === -1\r\n  ) {\r\n    return ''\r\n  }\r\n\r\n  return getAttribute(el, 'value')\r\n}\r\n\r\nexport default getValue\r\n","import isElement from './isElement'\r\nimport setAttribute from './setAttribute'\r\nimport { FROM_ELEMENT_TAGS } from './utils/enum'\r\n\r\n/**\r\n * 给 DOM （表单）元素设置 value 属性值\r\n * ========================================================================\r\n * @method setValue\r\n * @since 0.5.0\r\n * @param {HTMLElement} el\r\n * @param {Boolean|String|Number} val\r\n */\r\nconst setValue = (el, val) => {\r\n  if (\r\n    !isElement(el) ||\r\n    FROM_ELEMENT_TAGS.indexOf(el.tagName.toLowerCase()) === -1\r\n  ) {\r\n    return false\r\n  }\r\n\r\n  setAttribute(el, 'value', val)\r\n}\r\n\r\nexport default setValue\r\n","import isElement from './isElement'\n\n/**\n * 检测 DOM 节点是否包含名为 className 的样式\n * ========================================================================\n * @method hasClass\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/contains\n * @param {HTMLElement} el - DOM 节点\n * @param {String} className - 样式名称\n * @returns {Boolean}\n */\nconst hasClass = (el, className) => {\n  let pattern\n  let allClass\n  let classList\n\n  if (!isElement(el) || !className) {\n    return false\n  }\n\n  pattern = new RegExp('(\\\\s|^)' + className + '(\\\\s|$)')\n  allClass = el.className\n\n  if (!allClass) {\n    return false\n  }\n\n  classList = el.classList\n\n  if (classList?.contains) {\n    return el.classList.contains(className)\n  }\n\n  return !!pattern.exec(allClass)\n}\n\nexport default hasClass\n","import isElement from './isElement'\nimport hasClass from './hasClass'\n\n/**\n * 给 DOM 节点添加名为 className 的样式\n * ========================================================================\n * @method addClass\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/classList\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/add\n * @param {HTMLElement} el - DOM 节点\n * @param {String} className - 样式名称\n */\nconst addClass = (el, className) => {\n  let classList\n  let allClass\n\n  if (!isElement(el) || hasClass(el, className)) {\n    return false\n  }\n\n  classList = el.classList\n\n  if (classList?.add) {\n    classList.add(className)\n  } else {\n    allClass = el.className\n    allClass += allClass.length > 0 ? ' ' + className : className\n    el.className = allClass\n  }\n}\n\nexport default addClass\n","import isString from '../types/isString'\nimport isFunction from '../types/isFunction'\n\n/**\n * 清楚字符串起始位置所有的空格\n * ========================================================================\n * @method trim\n * @param {string} str\n * @returns {string|Boolean}\n */\nconst trim = (str) => {\n  if (!isString(str)) {\n    return false\n  }\n\n  if (isFunction(str.trim)) {\n    return str.trim()\n  } else {\n    return str.replace(/(^\\s+)|(\\s+$)/g, '')\n  }\n}\n\nexport default trim\n","import trim from './utils/string/trim'\nimport isElement from './isElement'\nimport hasClass from './hasClass'\n\n/**\n * 移除 DOM 节点的 className 样式\n * ========================================================================\n * @method removeClass\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/classList\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/remove\n * @param {HTMLElement} el - DOM 节点\n * @param {String} className - 样式名称\n */\nconst removeClass = (el, className) => {\n  let allClass\n  let classList\n\n  if (!isElement(el) || !className) {\n    return false\n  }\n\n  allClass = el.className\n\n  if (!allClass || !hasClass(el, className)) {\n    return false\n  }\n\n  classList = el.classList\n\n  if (classList?.remove) {\n    classList.remove(className)\n  } else {\n    allClass = trim(allClass.replace(className, ''))\n    el.className = allClass\n  }\n}\n\nexport default removeClass\n","const isUndefined = (val) => {\r\n  return typeof val === 'undefined'\r\n}\r\n\r\nexport default isUndefined\r\n","const toCamel = (prop) => {\r\n  const props = {}\r\n\r\n  function toUpper(x, l) {\r\n    return l.toUpperCase()\r\n  }\r\n\r\n  return (\r\n    props[prop] ||\r\n    (props[prop] =\r\n      prop.indexOf('-') === -1 ? prop : prop.replace(/-([a-z])/gi, toUpper))\r\n  )\r\n}\r\n\r\nexport default toCamel\r\n","import toCamel from './utils/string/toCamel'\r\nimport isString from './utils/types/isString'\r\nimport isElement from './isElement'\r\n\r\n/**\r\n * 获取 DOM 元素的某个 CSS 样式值\r\n * ========================================================================\r\n * @method getStyle\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Window/getComputedStyle\r\n * @param {HTMLElement} el\r\n * @param {String} attr\r\n * @returns {String|Boolean}\r\n */\r\nconst getStyle = (el, attr) => {\r\n  let prop\r\n\r\n  /* istanbul ignore else */\r\n  if (!isElement(el) || !isString(attr)) {\r\n    return false\r\n  }\r\n\r\n  prop = attr === 'float' ? 'cssFloat' : toCamel(attr)\r\n\r\n  return getComputedStyle(el)[prop]\r\n}\r\n\r\nexport default getStyle\r\n","// HTML 合法的标签\nconst TAGS = [\n  'a',\n  'abbr',\n  'address',\n  'area',\n  'article',\n  'aside',\n  'audio',\n  'b',\n  'base',\n  'bdi',\n  'bdo',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'cite',\n  'code',\n  'col',\n  'colgroup',\n  'data',\n  'datalist',\n  'dd',\n  'del',\n  'details',\n  'dfn',\n  'dialog',\n  'div',\n  'dl',\n  'dt',\n  'em',\n  'embed',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hgroup',\n  'hr',\n  'html',\n  'i',\n  'iframe',\n  'img',\n  'input',\n  'ins',\n  'kbd',\n  'label',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'map',\n  'mark',\n  'math',\n  'menu',\n  'menuitem',\n  'meta',\n  'meter',\n  'nav',\n  'noscript',\n  'object',\n  'ol',\n  'optgroup',\n  'option',\n  'output',\n  'p',\n  'param',\n  'picture',\n  'pre',\n  'progress',\n  'q',\n  'rb',\n  'rp',\n  'rt',\n  'rtc',\n  'ruby',\n  's',\n  'samp',\n  'script',\n  'search',\n  'section',\n  'select',\n  'slot',\n  'small',\n  'source',\n  'span',\n  'strong',\n  'style',\n  'sub',\n  'summary',\n  'sup',\n  'svg',\n  'table',\n  'tbody',\n  'td',\n  'template',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'time',\n  'title',\n  'tr',\n  'track',\n  'u',\n  'ul',\n  'var',\n  'video',\n  'wbr'\n]\n\nexport default TAGS\n","import isString from './isString'\nimport trim from '../string/trim'\nimport TAGS from './tags'\n\n/**\n * 检测测试数据是否为合法的 HTML 代码\n * ========================================================================\n * @method isHTML\n * @category Lang\n * @see https://github.com/sindresorhus/html-tags\n * @see https://github.com/sindresorhus/is-html\n * @param {String} str - 要检测的数据\n * @returns {Boolean} 'val' 为合法的 HTML 代码，返回 true，否则返回 false\n */\nconst isHTML = (str) => {\n  let html\n  let basic\n  let full\n\n  if (!isString(str)) {\n    return false\n  }\n\n  // 为了提高性能，我们将其限制在合理的长度内。\n  html = trim(str).slice(0, 1000)\n  basic = /\\s*<!doctype html>|<html\\b[^>]*>|<body\\b[^>]*>|<x-[^>]+>/i\n  full = new RegExp(TAGS.map((tag) => `<${tag}\\\\b[^>]*>`).join('|'), 'i')\n\n  return basic.test(html) || full.test(html)\n}\n\nexport default isHTML\n","/**\r\n * 移除字符串中的 JavaScript 代码\r\n * ========================================================================\r\n * @param {String} str\r\n * @returns {String}\r\n */\r\nconst stripScripts = (str) => {\r\n  return str.replace(/<script[^>]*>.*?<\\/script>/gi, '')\r\n}\r\n\r\nexport default stripScripts\r\n","import toString from '../lang/toString'\r\nimport isObject from './isObject'\r\n\r\n/**\r\n * @method isHTMLCollection\r\n * @param {Object|NodeList|HTMLCollection} el\r\n * @return {Boolean}\r\n */\r\nconst isHTMLCollection = (el) => {\r\n  return !!(isObject(el) && toString(el) === '[object NodeList]')\r\n}\r\n\r\nexport default isHTMLCollection\r\n","import toString from '../lang/toString'\nimport isObject from './isObject'\n\nconst isFragment = (fragment) => {\n  return !!(\n    isObject(fragment) && toString(fragment) === '[object DocumentFragment]'\n  )\n}\n\nexport default isFragment\n","import toString from '../lang/toString'\r\nimport isObject from './isObject'\r\n\r\nconst isTextNode = (el) => {\r\n  return !!(\r\n    isObject(el) &&\r\n    (toString(el) === '[object Text]' || (el.tagName && el.nodeType === 3))\r\n  )\r\n}\r\n\r\nexport default isTextNode\r\n","import isObject from './isObject'\r\nimport isElement from './isElement'\r\nimport isHTMLCollection from './isHTMLCollection'\r\nimport isFragment from './isFragment'\r\nimport isTextNode from './isTextNode'\r\n\r\nconst isDOM = (el) => {\r\n  return !!(\r\n    isObject(el) &&\r\n    (isElement(el) || isHTMLCollection(el) || isFragment(el) || isTextNode(el))\r\n  )\r\n}\r\n\r\nexport default isDOM\r\n","import isString from './utils/types/isString'\r\nimport isElement from './isElement'\r\n\r\n/**\r\n * 获取或者设置 DOM 元素的 innerText 属性值，或者通过字符串，创建 TextNode 元素\r\n * ========================================================================\r\n * @method text\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Node/textContent\r\n * @param {HTMLElement|String} el\r\n * @param {String} [str]\r\n * @return {Text|*}\r\n */\r\nconst text = (el, str) => {\r\n  if (!el || (!isString(el) && !isElement(el))) {\r\n    return false\r\n  }\r\n\r\n  if (isString(el)) {\r\n    return document.createTextNode(el)\r\n  } else if (isString(str)) {\r\n    el.textContent = str\r\n  } else {\r\n    return el.textContent\r\n  }\r\n}\r\n\r\nexport default text\r\n","import isObject from './utils/types/isObject'\nimport isString from './utils/types/isString'\nimport isArray from './utils/types/isArray'\nimport isDOM from './isDOM'\nimport text from './text'\nimport setAttributes from './setAttributes'\n\n/**\n * 创建 DOM 节点，并添加属性和子节点\n * ========================================================================\n * @method createElement\n * @param {String} tagName - 标签名称\n * @param {Object|Array|HTMLElement|DocumentFragment|String} [attrs] - 属性对象或者子节点\n * @param {Array|HTMLElement|DocumentFragment|String} [children] - 子节点数组\n * @returns {HTMLElement|null}\n */\nconst createElement = (tagName, attrs, children) => {\n  const $fragment = document.createDocumentFragment()\n\n  if (!tagName) {\n    return null\n  }\n\n  const $el = document.createElement(tagName)\n  const isValidChild = (child) => {\n    return isDOM(child) || isString(child)\n  }\n  const append = (child) => {\n    let $child\n\n    if (!isValidChild(child)) {\n      return false\n    }\n\n    if (isDOM(child)) {\n      $child = child\n    } else {\n      $child = text(child)\n    }\n\n    $fragment.appendChild($child)\n  }\n\n  if (isString(attrs)) {\n    append(text(attrs))\n  } else if (isDOM(attrs)) {\n    append(attrs)\n  } else if (isArray(attrs) && attrs.every((attr) => isValidChild(attr))) {\n    attrs.forEach((child) => {\n      append(child)\n    })\n  } else if (isObject(attrs) && !isDOM(attrs)) {\n    setAttributes($el, attrs)\n  }\n\n  if (isArray(children)) {\n    children.forEach((child) => {\n      append(child)\n    })\n  } else {\n    append(children)\n  }\n\n  $el.appendChild($fragment)\n\n  return $el\n}\n\nexport default createElement\n","import isHTML from './utils/types/isHTML'\r\nimport isString from './utils/types/isString'\r\nimport stripScripts from './utils/string/stripScripts'\r\nimport isElement from './isElement'\r\nimport createElement from './createElement'\r\n\r\n/**\r\n * 获取或者设置 DOM 元素的 innerHTML 属性值，或者通过 HTML 字符串，创建 DOM 元素\r\n * ========================================================================\r\n * @method html\r\n * @param {HTMLElement|String} el\r\n * @param {String} [strHTML]\r\n * @return {DocumentFragment|null|*}\r\n */\r\nconst html = (el, strHTML) => {\r\n  const $fragment = document.createDocumentFragment()\r\n\r\n  if (!el || (!isHTML(el) && !isString(el) && !isElement(el))) {\r\n    return null\r\n  }\r\n\r\n  if (isHTML(el)) {\r\n    const template = createElement('div')\r\n    let children = []\r\n\r\n    template.innerHTML = stripScripts(el)\r\n    children = [...template.childNodes]\r\n    children.forEach((child) => {\r\n      $fragment.appendChild(child)\r\n    })\r\n\r\n    return $fragment\r\n  } else if (isString(strHTML)) {\r\n    el.innerHTML = stripScripts(strHTML)\r\n  } else {\r\n    return el.innerHTML\r\n  }\r\n}\r\n\r\nexport default html\r\n","import getAttribute from '../getAttribute'\r\nimport setAttribute from '../setAttribute'\r\nimport removeAttribute from '../removeAttribute'\r\nimport getAttributes from '../getAttributes'\r\nimport setAttributes from '../setAttributes'\r\nimport removeAttributes from '../removeAttributes'\r\nimport getValue from '../getValue'\r\nimport setValue from '../setValue'\r\nimport hasClass from '../hasClass'\r\nimport addClass from '../addClass'\r\nimport replaceClass from '../replaceClass'\r\nimport removeClass from '../removeClass'\r\nimport toggleClass from '../toggleClass'\r\nimport attrs from '../attrs'\r\nimport enable from '../enable'\r\nimport disable from '../disable'\r\nimport readonly from '../readonly'\r\nimport html from '../html'\r\nimport text from '../text'\r\nimport val from '../val'\r\n\r\nconst DOM = {\r\n  getAttribute,\r\n  setAttribute,\r\n  removeAttribute,\r\n  getAttributes,\r\n  setAttributes,\r\n  removeAttributes,\r\n  getValue,\r\n  setValue,\r\n  hasClass,\r\n  addClass,\r\n  replaceClass,\r\n  removeClass,\r\n  toggleClass,\r\n  attrs,\r\n  enable,\r\n  disable,\r\n  readonly,\r\n  html,\r\n  text,\r\n  val\r\n}\r\n\r\nexport default DOM\r\n","import isArray from './utils/types/isArray'\r\nimport isElement from './isElement'\r\nimport removeAttribute from './removeAttribute'\r\n\r\n/**\r\n * 移除 DOM 元素的 DOM 属性值\r\n * ========================================================================\r\n * @method removeAttributes\r\n * @param {HTMLElement} el\r\n * @param {Array} attrs\r\n */\r\nconst removeAttributes = (el, attrs) => {\r\n  let props = []\r\n\r\n  if (!isElement(el) || isArray(attrs)) {\r\n    return false\r\n  }\r\n\r\n  props = attrs\r\n\r\n  /* istanbul ignore else */\r\n  if (!props) {\r\n    props = el.getAttributeNames()\r\n  }\r\n\r\n  props.forEach((prop) => {\r\n    removeAttribute(el, prop)\r\n  })\r\n}\r\n\r\nexport default removeAttributes\r\n","import isElement from './isElement'\r\nimport hasClass from './hasClass'\r\n\r\n/**\r\n * 替换 DOM 节点的样式类\r\n * ========================================================================\r\n * @method replaceClass\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/classList\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/replace\r\n * @param {HTMLElement} el - 要替换样式的 DOM 节点\r\n * @param {String} oldCls - 要替换的目标样式名称\r\n * @param {String} newCls - 新的样式名称\r\n */\r\nconst replaceClass = (el, oldCls, newCls) => {\r\n  let allClass\r\n  let classList\r\n\r\n  if (!isElement(el)) {\r\n    return false\r\n  }\r\n\r\n  allClass = el.className\r\n\r\n  if (!allClass || !hasClass(el, oldCls)) {\r\n    return false\r\n  }\r\n\r\n  classList = el.classList\r\n\r\n  if (classList?.replace) {\r\n    classList.replace(oldCls, newCls)\r\n  } else {\r\n    el.className = allClass.replace(oldCls, newCls)\r\n  }\r\n}\r\n\r\nexport default replaceClass\r\n","import isElement from './isElement'\r\nimport hasClass from './hasClass'\r\nimport addClass from './addClass'\r\nimport removeClass from './removeClass'\r\n\r\n/**\r\n * 切换元素的类。\r\n * ========================================================================\r\n * @method\r\n * @param {HTMLElement} el\r\n * @param {String} className\r\n */\r\nconst toggleClass = (el, className) => {\r\n  let classList\r\n\r\n  if (!isElement(el) || !className) {\r\n    return false\r\n  }\r\n\r\n  classList = el.classList\r\n\r\n  if (classList?.toggle) {\r\n    classList.toggle(className)\r\n  } else if (hasClass(el, className)) {\r\n    removeClass(el, className)\r\n  } else {\r\n    addClass(el, className)\r\n  }\r\n}\r\n\r\nexport default toggleClass\r\n","import isArray from './utils/types/isArray'\r\nimport isObject from './utils/types/isObject'\r\nimport isString from './utils/types/isString'\r\nimport isUndefined from './utils/types/isUndefined'\r\nimport isElement from './isElement'\r\nimport setAttribute from './setAttribute'\r\nimport getAttribute from './getAttribute'\r\nimport setAttributes from './setAttributes'\r\nimport getAttributes from './getAttributes'\r\n\r\n/**\r\n * 获取或者设置 DOM 节点的单个或者多个 DOM 属性\r\n * ========================================================================\r\n * @method attrs\r\n * @param {HTMLElement} el\r\n * @param {String|Object|Array} [attr]\r\n * @param {*} [value]\r\n * @return {Object|null}\r\n */\r\nconst attrs = (el, attr, value) => {\r\n  if (!isElement(el)) {\r\n    return null\r\n  }\r\n\r\n  // 仅传递 el 参数，获取 el 元素的所有 DOM 属性\r\n  if (!attr && !value) {\r\n    return getAttributes(el)\r\n  }\r\n\r\n  if (!isString(attr) && !isArray(attr) && !isObject(attr)) {\r\n    return null\r\n  }\r\n\r\n  // 传递 attr 属性\r\n  if (isString(attr)) {\r\n    // 传递了 value 值，用于设置 DOM 属性\r\n    if (!isUndefined(value)) {\r\n      setAttribute(el, attr, value)\r\n    } else {\r\n      // 没有传递 value 值，用于获取 DOM 属性\r\n      return getAttribute(el, attr)\r\n    }\r\n  } else if (isArray(attr)) {\r\n    // 仅传递了 attr 属性\r\n    // attr 为数组是，用于获取 el 元素的多个 DOM 属性\r\n    return getAttributes(el, attr)\r\n  } else {\r\n    // attr 为对象，则用于给 el 元素设置多个 DOM 属性值\r\n    setAttributes(el, attr)\r\n  }\r\n}\r\n\r\nexport default attrs\r\n","import isElement from './isElement'\r\nimport getAttribute from './getAttribute'\r\nimport removeAttribute from './removeAttribute'\r\nimport { DISABLE_TAGS } from './utils/enum'\r\n\r\n/**\r\n * 启用指定 DOM 元素\r\n * ========================================================================\r\n * @method enable\r\n * @since 1.2.0\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes/disabled\r\n * @param {HTMLElement} el\r\n */\r\nconst enable = (el) => {\r\n  if (\r\n    !isElement(el) ||\r\n    !getAttribute(el, 'disabled') ||\r\n    DISABLE_TAGS.indexOf(el.tagName.toLowerCase()) === -1\r\n  ) {\r\n    return false\r\n  }\r\n\r\n  removeAttribute(el, 'disabled')\r\n}\r\n\r\nexport default enable\r\n","import isElement from './isElement'\r\nimport getAttribute from './getAttribute'\r\nimport setAttribute from './setAttribute'\r\nimport { DISABLE_TAGS } from './utils/enum'\r\n\r\n/**\r\n * 禁用指定 DOM 元素\r\n * ========================================================================\r\n * @method disable\r\n * @since 1.2.0\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes/disabled\r\n * @param {HTMLElement} el\r\n */\r\nconst disable = (el) => {\r\n  if (\r\n    !isElement(el) ||\r\n    getAttribute(el, 'disabled') ||\r\n    DISABLE_TAGS.indexOf(el.tagName.toLowerCase()) === -1\r\n  ) {\r\n    return false\r\n  }\r\n\r\n  setAttribute(el, 'disabled', true)\r\n}\r\n\r\nexport default disable\r\n","import isElement from './isElement'\r\nimport getAttribute from './getAttribute'\r\nimport removeAttribute from './removeAttribute'\r\nimport setAttribute from './setAttribute'\r\nimport getStyle from './getStyle'\r\nimport { READONLY_INPUT_TYPES } from './utils/enum'\r\n\r\n/**\r\n * 启用或者取消 DOM 元素的只读模式\r\n * ========================================================================\r\n * @method readonly\r\n * @since 1.2.0\r\n * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly\r\n * @param el\r\n * @return {boolean}\r\n */\r\nconst readonly = (el) => {\r\n  const TAGS = ['input', 'textarea']\r\n  let tagName\r\n  let type\r\n\r\n  if (!isElement(el)) {\r\n    return false\r\n  }\r\n\r\n  tagName = el.tagName.toLowerCase()\r\n\r\n  if (TAGS.indexOf(tagName) === -1) {\r\n    return false\r\n  }\r\n\r\n  if (tagName === 'input') {\r\n    type = getAttribute(el, 'type').toLowerCase()\r\n\r\n    if (\r\n      READONLY_INPUT_TYPES.indexOf(type) === -1 ||\r\n      getStyle(el, 'display') === 'hidden'\r\n    ) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  if (getAttribute(el, 'readonly')) {\r\n    removeAttribute(el, 'readonly')\r\n  } else {\r\n    setAttribute(el, 'readonly', true)\r\n  }\r\n}\r\n\r\nexport default readonly\r\n","import isUndefined from './utils/types/isUndefined'\r\nimport getValue from './getValue'\r\nimport setValue from './setValue'\r\n\r\n/**\r\n * 获取或者设置 DOM （表单）元素的 value 属性值\r\n * ========================================================================\r\n * @method getValue\r\n * @since 0.5.0\r\n * @param {HTMLElement} el\r\n * @param {Boolean|String|Number} value\r\n * @return {string}\r\n */\r\nconst val = (el, value) => {\r\n  if (!isUndefined(value)) {\r\n    setValue(el, value)\r\n  } else {\r\n    return getValue(el)\r\n  }\r\n}\r\n\r\nexport default val\r\n","import html from './html'\r\nimport isHTML from './utils/types/isHTML'\r\n\r\n/**\r\n * 通过 HTML 创建 DOM 元素\r\n * ========================================================================\r\n * @method build\r\n * @since 1.1.0\r\n * @param {String} str\r\n * @return {Element|null}\r\n */\r\nconst build = (str) => {\r\n  if (!isHTML(str)) {\r\n    return null\r\n  }\r\n\r\n  return html(str).firstElementChild\r\n}\r\n\r\nexport default build\r\n","import isElement from './isElement'\r\n\r\n/**\r\n * 克隆节点\r\n * ========================================================================\r\n * @method clone\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Node/cloneNode\r\n * @param {HTMLElement|Text|HTMLFrameElement} el\r\n * @param {Boolean} deep - 受否深度拷贝（默认值：false）。\r\n *                         false - 仅拷贝 DOM 本身；\r\n *                         true - 拷贝 DOM 以及所有子节点；\r\n * @return {ActiveX.IXMLDOMNode|Node|null}\r\n */\r\nconst clone = (el, deep = false) => {\r\n  if (!isElement(el)) {\r\n    return null\r\n  }\r\n\r\n  return el.cloneNode(deep)\r\n}\r\n\r\nexport default clone\r\n","/**\r\n * 判断某个 DOM 元素是否为另一个 DOM 节点的祖先节点\r\n * ========================================================================\r\n * @method _isAncestor\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Node/compareDocumentPosition\r\n * @param {HTMLElement} ancestor\r\n * @param {HTMLElement} descendent\r\n * @return {Boolean}\r\n * @private\r\n */\r\nconst _isAncestor = (ancestor, descendent) => {\r\n  let result = false\r\n\r\n  if (!ancestor || !descendent || !ancestor.nodeType || !descendent.nodeType) {\r\n    return result\r\n  }\r\n\r\n  if (ancestor.contains && ancestor !== descendent) {\r\n    result = ancestor.contains(descendent)\r\n  } else {\r\n    result = !!(ancestor?.compareDocumentPosition(descendent) & 16)\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nexport default _isAncestor\r\n","import isElement from './isElement'\r\nimport _isAncestor from './_isAncestor'\r\n\r\n/**\r\n * 判断 DOM 元素是否在当前文档中。\r\n * ========================================================================\r\n * @method inDocument\r\n * @param {String | HTMLElement} el\r\n * @param {Object} [doc]\r\n * @return {Boolean}\r\n */\r\nconst inDocument = (el, doc) => {\r\n  let $doc\r\n\r\n  if (!isElement(el)) {\r\n    return false\r\n  }\r\n\r\n  $doc = doc || el.ownerDocument\r\n\r\n  return _isAncestor($doc.documentElement, el)\r\n}\r\n\r\nexport default inDocument\r\n","import isElement from './isElement'\r\nimport getStyle from './getStyle'\r\nimport inDocument from './inDocument'\r\n\r\n/**\r\n * 判断 DOM 元素是否可以定位（可见且在当前当前文档中）。\r\n * ========================================================================\r\n * @method canPosition\r\n * @param {HTMLElement} el\r\n * @return {Boolean}\r\n */\r\nconst canPosition = (el) => {\r\n  if (!isElement(el)) {\r\n    return false\r\n  }\r\n\r\n  return getStyle(el, 'display') !== 'none' && inDocument(el)\r\n}\r\n\r\nexport default canPosition\r\n","/**\n * 获取 el 节点下匹配 selector 选择器的 DOM 节点\n * ========================================================================\n * Element.matches() 方法可以用来判断 DOM 元素是否与给定的选择器匹配，事件代理判断是\n * 否触发绑定的代理事件回调函数，关键就是使用 Element.matches() 辨别当前事件触发的目\n * 标 DOM 元素是否为事件代理所期望触发的目标。\n * ========================================================================\n * @method matches\n * @see https://developer.mozilla.org/en-US/docs/web/api/element/matches\n * @param {HTMLElement} el - （必须）DOM 元素\n * @param {String} selector - （必须）匹配 DOM 元素的选择器\n * @returns {HTMLElement|Boolean}\n */\nconst matches = (el, selector = '') => {\n  const sel = selector.replace(/^>/i, '')\n\n  if (!selector || !sel || !el) {\n    return false\n  }\n\n  /* istanbul ignore else */\n  if (el.matches) {\n    return el.matches(sel)\n  } else if (el.msMatchesSelector) {\n    return el.msMatchesSelector(sel)\n  } else {\n    return false\n  }\n}\n\nexport default matches\n","/**\n * 获取 DOM 元素的父节点\n * ========================================================================\n * @method getHostOrParent\n * @param {*|HTMLElement} el - （必须）要获取父节点的 DOM 元素\n * @returns {HTMLElement|*}\n */\nconst getHostOrParent = (el) => {\n  return el.host && el !== document && el.host.nodeType\n    ? el.host\n    : el.parentNode\n}\n\nexport default getHostOrParent\n","const isBoolean = (val) => {\r\n  return typeof val === 'boolean'\r\n}\r\n\r\nexport default isBoolean\r\n","import isBoolean from './utils/types/isBoolean'\r\nimport isElement from './isElement'\r\n\r\n/**\r\n * 返回与指定的选择器组匹配的文档中的 DOM 元素或者 DOM 元素列表。\r\n * ========================================================================\r\n * @method  getEl\r\n * @param {String} selector\r\n * @param {HTMLElement|Boolean} [el]\r\n * @param {Boolean} [multiple]\r\n * @return {NodeListOf<*>|HTMLElement|*}\r\n */\r\nconst getEl = (selector, el, multiple = false) => {\r\n  const $el = isElement(el) ? el : document\r\n  let isMultiple = multiple\r\n\r\n  if (isBoolean(el)) {\r\n    isMultiple = el\r\n  }\r\n\r\n  if (isMultiple) {\r\n    return $el.querySelectorAll(selector)\r\n  }\r\n\r\n  return $el.querySelector(selector)\r\n}\r\n\r\nexport default getEl\r\n","import isHTMLCollection from './utils/types/isHTMLCollection'\r\n\r\n/**\r\n * 检测是否为 NodeList\r\n * ========================================================================\r\n * @method isCoolection\r\n * @param {HTMLElement|Object} el\r\n * @return {Boolean}\r\n */\r\nconst isCollection = (el) => {\r\n  return isHTMLCollection(el)\r\n}\r\n\r\nexport default isCollection\r\n","import isFunction from './utils/types/isFunction'\r\nimport isString from './utils/types/isString'\r\nimport isCollection from './isCollection'\r\nimport matches from './matches'\r\n\r\n/**\r\n * 返回 NodeList 的元素中与 selector 过滤条件匹配的 DOM 元素（数组）\r\n * ========================================================================\r\n * @method filter\r\n * @since 1.2.0\r\n * @param {NodeList} collection\r\n * @param {String|Function} selector\r\n * @return {Array}\r\n */\r\nconst filter = (collection, selector) => {\r\n  let callback\r\n  let items\r\n\r\n  if (\r\n    !isCollection(collection) ||\r\n    (!isString(selector) && !isFunction(selector))\r\n  ) {\r\n    return []\r\n  }\r\n\r\n  items = [...collection]\r\n\r\n  if (isString(selector)) {\r\n    callback = (item) => {\r\n      return matches(item, selector)\r\n    }\r\n  } else {\r\n    callback = (item, i) => {\r\n      return selector(item, i)\r\n    }\r\n  }\r\n\r\n  return items.filter(callback)\r\n}\r\n\r\nexport default filter\r\n","import isElement from './isElement'\r\n\r\n/**\r\n * 返回一个指向最近的（指包含层级上的最近）包含该元素的定位元素。\r\n * 当元素的 style.display 设置为 \"none\" 时，offsetParent 返回 null。\r\n * ========================================================================\r\n * @method getOffsetParent\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/offsetParent\r\n * @param {HTMLElement} el\r\n * @return {HTMLElement|null}\r\n */\r\nconst getOffsetParent = (el) => {\r\n  if (!isElement(el)) {\r\n    return null\r\n  }\r\n  return el.offsetParent\r\n}\r\n\r\nexport default getOffsetParent\r\n","import isElement from './isElement'\r\nimport getStyle from './getStyle'\r\n\r\n/**\r\n * 返回最近的（指包含层级上的最近）包含该元素的滚动父元素\r\n * （overflow/overflow-x/overflow-y: auto ）。\r\n * ========================================================================\r\n * @method getScrollParent\r\n * @param {HTMLElement|Object} el\r\n * @return {HTMLElement|Document|null}\r\n */\r\nconst getScrollParent = (el) => {\r\n  const $root = window\r\n  let $parent\r\n\r\n  if (!isElement(el) && el !== document) {\r\n    return null\r\n  }\r\n\r\n  $parent = el.parentNode\r\n\r\n  if (!$parent) {\r\n    return el\r\n  }\r\n\r\n  if ($parent === $root.document) {\r\n    if ($root.document.body.scrollTop || $root.document.body.scrollLeft) {\r\n      return $root.document.body\r\n    } else {\r\n      return $root.document.documentElement\r\n    }\r\n  }\r\n\r\n  // Firefox want us to check `-x` and `-y` variations as well\r\n  /* istanbul ignore else */\r\n  if (\r\n    ['scroll', 'auto'].indexOf(getStyle($parent, 'overflow')) !== -1 ||\r\n    ['scroll', 'auto'].indexOf(getStyle($parent, 'overflow-x')) !== -1 ||\r\n    ['scroll', 'auto'].indexOf(getStyle($parent, 'overflow-y')) !== -1\r\n  ) {\r\n    return $parent\r\n  }\r\n\r\n  return getScrollParent(el.parentNode)\r\n}\r\n\r\nexport default getScrollParent\r\n","/**\r\n * 返回 URL 地址中的查询参数（键/值）对象\r\n * ====================================================\r\n * @method getURLSearchParams\r\n * @param {String} [url] - 可选参数，URL 地址\r\n * @returns {Object}\r\n */\r\nconst getURLSearchParams = (url = location.search) => {\r\n  const pattern = /([^?=&]+)(=([^&]*))/g\r\n  return (url.match(pattern) || []).reduce((a, v) => {\r\n    const index = v.indexOf('=')\r\n    const key = v.slice(0, index)\r\n    const value = v.slice(index + 1)\r\n    return (a[key] = value.replace(/\\+/g, ' ')), a\r\n  }, {})\r\n}\r\n\r\nexport default getURLSearchParams\r\n","import isElement from './isElement'\r\n\r\n/**\r\n * 获取 DOM 元素的前一个邻居元素节点\r\n * ========================================================================\r\n * @method getPreviousSibling\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/previousElementSibling\r\n * @param {HTMLElement} el\r\n * @return {HTMLElement|null}\r\n */\r\nconst getPreviousSibling = (el) => {\r\n  return isElement(el) ? el.previousElementSibling : null\r\n}\r\n\r\nexport default getPreviousSibling\r\n","import isElement from './isElement'\r\nimport getPreviousSibling from './getPreviousSibling'\r\n\r\n/**\r\n * 获取 DOM 元素的前面所有邻居元素节点。\r\n * ========================================================================\r\n * @method getPreviousSiblings\r\n * @param {HTMLElement} el\r\n * @return {Array}\r\n */\r\nconst getPreviousSiblings = (el) => {\r\n  const prev = []\r\n  let $sibling\r\n\r\n  if (!isElement(el)) {\r\n    return prev\r\n  }\r\n\r\n  $sibling = getPreviousSibling(el)\r\n\r\n  if ($sibling) {\r\n    prev.push($sibling)\r\n  }\r\n\r\n  while ($sibling) {\r\n    $sibling = getPreviousSibling($sibling)\r\n\r\n    if ($sibling) {\r\n      prev.push($sibling)\r\n    }\r\n  }\r\n\r\n  return prev\r\n}\r\n\r\nexport default getPreviousSiblings\r\n","import isElement from './isElement'\r\n\r\n/**\r\n * 获取 DOM 元素的后一个邻居元素节点\r\n * ========================================================================\r\n * @method getNextSibling\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/nextElementSibling\r\n * @param {HTMLElement} el\r\n * @return {HTMLElement|null}\r\n */\r\nconst getNextSibling = (el) => {\r\n  return isElement(el) ? el.nextElementSibling : null\r\n}\r\n\r\nexport default getNextSibling\r\n","import isElement from './isElement'\r\nimport getNextSibling from './getNextSibling'\r\n\r\n/**\r\n * 获取 DOM 元素的后面所有邻居元素节点。\r\n * ========================================================================\r\n * @method getNextSiblings\r\n * @param {HTMLElement} el\r\n * @return {Array}\r\n */\r\nconst getNextSiblings = (el) => {\r\n  const next = []\r\n  let $sibling\r\n\r\n  if (!isElement(el)) {\r\n    return next\r\n  }\r\n\r\n  $sibling = getNextSibling(el)\r\n\r\n  if ($sibling) {\r\n    next.push($sibling)\r\n  }\r\n\r\n  while ($sibling) {\r\n    $sibling = getNextSibling($sibling)\r\n\r\n    if ($sibling) {\r\n      next.push($sibling)\r\n    }\r\n  }\r\n\r\n  return next\r\n}\r\n\r\nexport default getNextSiblings\r\n","import isElement from './isElement'\r\nimport getPreviousSiblings from './getPreviousSiblings'\r\nimport getNextSiblings from './getNextSiblings'\r\n\r\n/**\r\n * 获取 DOM 元素的前面或后面所有邻居元素节点。\r\n * ========================================================================\r\n * @method getSiblings\r\n * @param {HTMLElement} el\r\n * @param {Boolean} [includeSelf]\r\n * @return {Array}\r\n */\r\nconst getSiblings = (el, includeSelf = false) => {\r\n  let list = []\r\n  let prev = []\r\n  let next = []\r\n\r\n  if (!isElement(el)) {\r\n    return list\r\n  }\r\n\r\n  prev = getPreviousSiblings(el)\r\n  list.push(...prev)\r\n\r\n  /* istanbul ignore else */\r\n  if (includeSelf) {\r\n    list.push(el)\r\n  }\r\n\r\n  next = getNextSiblings(el)\r\n  list.push(...next)\r\n\r\n  return list\r\n}\r\n\r\nexport default getSiblings\r\n","/**\r\n * ========================================================================\r\n * @method getViewportHeight\r\n * @return {Number}\r\n */\r\nconst getViewportHeight = () => {\r\n  return Math.max(document.documentElement.clientHeight, window.innerHeight)\r\n}\r\n\r\nexport default getViewportHeight\r\n","/**\r\n * ========================================================================\r\n * @method getViewportWidth\r\n * @return {Number}\r\n */\r\nconst getViewportWidth = () => {\r\n  return Math.max(document.documentElement.clientWidth, window.innerWidth)\r\n}\r\n\r\nexport default getViewportWidth\r\n","import isFunction from './utils/types/isFunction'\r\nimport isString from './utils/types/isString'\r\nimport isElement from './isElement'\r\nimport matches from './matches'\r\n\r\n/**\r\n * 检测 DOM 节点是否为符合检测条件的节点\r\n * ========================================================================\r\n * @method isMatched\r\n * @param {HTMLElement} el\r\n * @param {Function|String} filter\r\n * @return {Boolean}\r\n */\r\nconst isMatched = (el, filter) => {\r\n  if (!isElement(el) || (!isFunction(filter) && !isString(filter))) {\r\n    return false\r\n  }\r\n\r\n  if (isFunction(filter)) {\r\n    return filter(el)\r\n  } else {\r\n    return !!matches(el, filter)\r\n  }\r\n}\r\n\r\nexport default isMatched\r\n","import getSiblings from './getSiblings'\r\n\r\n/**\r\n * 获取 DOM 元素的前面或后面所有邻居元素节点。\r\n * ========================================================================\r\n * @method siblings\r\n * @alias getSiblings\r\n * @param {HTMLElement} el\r\n * @param {Boolean} [includeSelf]\r\n * @return {Array}\r\n */\r\nconst siblings = (el, includeSelf) => {\r\n  return getSiblings(el, includeSelf)\r\n}\r\n\r\nexport default siblings\r\n","import isTextNode from './utils/types/isTextNode'\r\n\r\n/**\r\n * 判断 DOM 元素是否未文本节点\r\n * ========================================================================\r\n * @method isText\r\n * @param {HTMLElement} el\r\n * @return {Boolean}\r\n */\r\nconst isText = (el) => {\r\n  return isTextNode(el)\r\n}\r\n\r\nexport default isText\r\n","/**\n * 检测数据是否为 Number 类型\n * ========================================================================\n * @method isNumber\n * @param {*} o\n * @returns {boolean}\n */\nconst isNumber = (o) => {\n  return typeof o === 'number'\n}\n\nexport default isNumber\n","import isString from './utils/types/isString'\r\nimport isNumber from './utils/types/isNumber'\r\n\r\n/**\r\n * CSS 单位值和数值互换\r\n * ========================================================================\r\n * @method pixel\r\n * @since 1.2.0\r\n * @param {String|Number} val\r\n * @return {Number|String|Array|Boolean}\r\n */\r\nconst pixel = (val) => {\r\n  const parse = (str) => {\r\n    const value = str.replace(/\\D*$/i, '')\r\n\r\n    if (value.indexOf('.') > -1) {\r\n      return Math.ceil(Number(value))\r\n    } else {\r\n      return Number(value)\r\n    }\r\n  }\r\n\r\n  if (!isString(val) && !isNumber(val)) {\r\n    return false\r\n  }\r\n\r\n  if (isString(val)) {\r\n    if (val.indexOf(' ') > -1) {\r\n      return val.split(' ').map((item) => pixel(item))\r\n    } else {\r\n      return parse(val)\r\n    }\r\n  } else {\r\n    return `${val}px`\r\n  }\r\n}\r\n\r\nexport default pixel\r\n","import isObject from './utils/types/isObject'\r\n\r\n/**\r\n * 将普通对象类型的数据转化成 URL 地址中的查询参数字符串\r\n * ====================================================\r\n * @method toURLSearchParams\r\n * @param {Object} o\r\n * @return {string}\r\n */\r\nconst toURLSearchParams = (o) => {\r\n  const params = []\r\n  const keys = Object.keys(o)\r\n\r\n  if (!isObject(o)) {\r\n    return ''\r\n  }\r\n\r\n  if (URLSearchParams) {\r\n    return new URLSearchParams(o).toString()\r\n  }\r\n\r\n  keys.forEach((key) => {\r\n    params.push(`${key}=${o[key]}`)\r\n  })\r\n\r\n  return decodeURIComponent(params.join('&'))\r\n}\r\n\r\nexport default toURLSearchParams\r\n","import build from '../build'\r\nimport copyToClipboard from '../copyToClipboard'\r\nimport createAndDownloadFile from '../createAndDownloadFile'\r\nimport createElement from '../createElement'\r\nimport clone from '../clone'\r\nimport canPosition from '../canPosition'\r\nimport closest from '../closest'\r\nimport contains from '../contains'\r\nimport byClass from '../byClass'\r\nimport byId from '../byId'\r\nimport getEl from '../getEl'\r\nimport filter from '../filter'\r\nimport find from '../find'\r\nimport findAll from '../findAll'\r\nimport has from '../has'\r\nimport getHostOrParent from '../getHostOrParent'\r\nimport getOffsetParent from '../getOffsetParent'\r\nimport getScrollParent from '../getScrollParent'\r\nimport getURLProps from '../getURLProps'\r\nimport getURLSearchParams from '../getURLSearchParams'\r\nimport getURLSearchParamByName from '../getURLSearchParamByName'\r\nimport index from '../index'\r\nimport inDocument from '../inDocument'\r\nimport inBounding from '../inBounding'\r\nimport inViewport from '../inViewport'\r\nimport isMatched from '../isMatched'\r\nimport matches from '../matches'\r\nimport children from '../children'\r\nimport openURL from '../openURL'\r\nimport parent from '../parent'\r\nimport pixel from '../pixel'\r\nimport serialize from '../serialize'\r\nimport toPixels from '../toPixels'\r\nimport toREM from '../toREM'\r\nimport toURLSearchParams from '../toURLSearchParams'\r\n\r\nconst DOM = {\r\n  build,\r\n  copyToClipboard,\r\n  createAndDownloadFile,\r\n  createElement,\r\n  clone,\r\n  canPosition,\r\n  closest,\r\n  contains,\r\n  byClass,\r\n  byId,\r\n  getEl,\r\n  filter,\r\n  find,\r\n  findAll,\r\n  has,\r\n  getHostOrParent,\r\n  getOffsetParent,\r\n  getScrollParent,\r\n  getURLProps,\r\n  getURLSearchParams,\r\n  getURLSearchParamByName,\r\n  index,\r\n  inDocument,\r\n  inBounding,\r\n  inViewport,\r\n  isMatched,\r\n  matches,\r\n  children,\r\n  openURL,\r\n  parent,\r\n  pixel,\r\n  serialize,\r\n  toREM,\r\n  toPixels,\r\n  toURLSearchParams\r\n}\r\n\r\nexport default DOM\r\n","import createElement from './createElement'\r\n\r\n/**\r\n * 复制文本到粘贴板\r\n * =============================================================\r\n * @method copyToClipboard\r\n * @since 1.4.0\r\n * @param {String} str - 要复制的文本\r\n */\r\nconst copyToClipboard = (str) => {\r\n  const el = createElement('textarea', {\r\n    value: str,\r\n    readonly: 'position:absolute;left:-99999px;',\r\n    style: ''\r\n  })\r\n  const $body = document.body\r\n  let selected\r\n\r\n  $body.appendChild(el)\r\n  selected =\r\n    document.getSelection().rangeCount > 0\r\n      ? document.getSelection().getRangeAt(0)\r\n      : false\r\n  el.select()\r\n  document.execCommand('copy')\r\n  $body.removeChild(el)\r\n\r\n  if (selected) {\r\n    document.getSelection().removeAllRanges()\r\n    document.getSelection().addRange(selected)\r\n  }\r\n}\r\n\r\nexport default copyToClipboard\r\n","import createElement from './createElement'\r\n\r\n/**\r\n * （通过文本）创建二进制的文件并下载文件\r\n * ====================================================\r\n * @method createAndDownloadFile\r\n * @since 1.4.0\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Blob/Blob\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL_static\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/URL/revokeObjectURL_static\r\n * @param {String} fileName 文件名\r\n * @param {String|Blob} content  文件内容\r\n */\r\nconst createAndDownloadFile = (fileName, content) => {\r\n  const $blob = new Blob([content])\r\n  const $anchor = createElement('a', {\r\n    download: fileName,\r\n    href: URL.createObjectURL($blob)\r\n  })\r\n\r\n  $anchor.click()\r\n  URL.revokeObjectURL($blob)\r\n}\r\n\r\nexport default createAndDownloadFile\r\n","import matches from './matches'\nimport getHostOrParent from './getHostOrParent'\n\n/**\n * 获取 base 元素父元素最近的包含 selector 选择器的元素\n * ========================================================================\n * @method closest\n * @param {HTMLElement} el - （必须）DOM 元素\n * @param {String} selector - （必须）DOM 元素的选择其\n * @param {HTMLElement} [ctx] - （可选）比对的 DOM 元素\n * @param {Boolean} [includeCTX] - （可选）是否包含 context DOM 元素\n * @returns {HTMLElement|null} - 返回最接近的 DOM 元素\n */\nconst closest = (el, selector, ctx, includeCTX) => {\n  const context = ctx || document\n\n  if (!el) {\n    return null\n  }\n\n  do {\n    /* istanbul ignore else */\n    if (\n      (selector != null &&\n        (selector.startsWith('>')\n          ? el.parentNode === context && matches(el, selector)\n          : matches(el, selector))) ||\n      (includeCTX && el === context)\n    ) {\n      return el\n    }\n\n    /* istanbul ignore else */\n    if (el === context) {\n      break\n    }\n\n    /* jshint boss:true */\n  } while ((el = getHostOrParent(el)))\n}\n\nexport default closest\n","import isString from './utils/types/isString'\r\nimport isElement from './isElement'\r\nimport _isAncestor from './_isAncestor'\r\nimport getEl from './getEl'\r\n\r\n/**\r\n * 判断某个 DOM 元素中是否包含另一个 DOM 元素\r\n * ========================================================================\r\n * @method contains\r\n * @param {HTMLElement|String} el\r\n * @param {HTMLElement} ancestor\r\n * @return {Boolean}\r\n */\r\nconst contains = (el, ancestor) => {\r\n  if (!isElement(ancestor) || (!isElement(el) && !isString(el))) {\r\n    return false\r\n  }\r\n\r\n  if (isElement(el)) {\r\n    return _isAncestor(ancestor, el)\r\n  } else {\r\n    return !!getEl(el, ancestor)\r\n  }\r\n}\r\n\r\nexport default contains\r\n","import isString from './utils/types/isString'\r\nimport isElement from './isElement'\r\n\r\n/**\r\n * 返回与指定的类选择器组匹配的文档中的元素列表 (使用深度优先的先序遍历文档的节点)。\r\n * 返回的对象是 NodeList 。\r\n * ========================================================================\r\n * @method byClass\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelectorAll\r\n * @param {String} className\r\n * @param {HTMLElement} [el]\r\n * @return {NodeListOf<Element>|null}\r\n */\r\nconst byClass = (className, el) => {\r\n  let selector\r\n  let $el\r\n\r\n  if (!isString(className)) {\r\n    return null\r\n  }\r\n\r\n  selector = className.replace(/^./i, '')\r\n  $el = isElement(el) ? el : document\r\n\r\n  return $el.querySelectorAll(`.${selector}`)\r\n}\r\n\r\nexport default byClass\r\n","import isString from './utils/types/isString'\r\nimport isElement from './isElement'\r\n\r\n/**\r\n * 返回文档中与指定 id 选择器匹配 Element对象\r\n * ========================================================================\r\n * @methods byId\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelector\r\n * @param {String} id\r\n * @param {HTMLElement} [el]\r\n * @return {HTMLElement}\r\n */\r\nconst byId = (id, el) => {\r\n  let selector\r\n  let $el\r\n\r\n  if (!isString(id)) {\r\n    return null\r\n  }\r\n\r\n  selector = id.replace(/^#/i, '')\r\n  $el = isElement(el) ? el : document\r\n\r\n  return $el.querySelector(`#${selector}`)\r\n}\r\n\r\nexport default byId\r\n","import getEl from './getEl'\r\n\r\n/**\r\n * 获取页面中第一个与 selector 匹配的 DOM 节点\r\n * ========================================================================\r\n * @method find\r\n * @since 0.4.0\r\n * @param {String} selector\r\n * @return {HTMLElement|null}\r\n */\r\nconst find = (selector) => {\r\n  return getEl(selector)\r\n}\r\n\r\nexport default find\r\n","import getEl from './getEl'\r\n\r\n/**\r\n * 获取页面中所有与 selector 匹配的 DOM 节点\r\n * ========================================================================\r\n * @method findAll\r\n * @since 0.4.0\r\n * @param {String} selector\r\n * @return {NodeListOf<*>|*}\r\n */\r\nconst findAll = (selector) => {\r\n  return getEl(selector, true)\r\n}\r\n\r\nexport default findAll\r\n","import isString from './utils/types/isString'\r\nimport isFunction from './utils/types/isFunction'\r\nimport isCollection from './isCollection'\r\nimport isElement from './isElement'\r\nimport getEl from './getEl'\r\nimport filter from './filter'\r\n\r\n/**\r\n * 将匹配的元素集减少为具有与选择器或过滤函数匹配的子体的元素集。\r\n * ========================================================================\r\n * @method has\r\n * @since 1.2.0\r\n * @param {HTMLElement|NodeList} el\r\n * @param {String|Function} selector\r\n * @return {Array}\r\n */\r\nconst has = (el, selector) => {\r\n  if (\r\n    (!isElement(el) && !isCollection(el)) ||\r\n    (!isString(selector) && !isFunction(selector))\r\n  ) {\r\n    return []\r\n  }\r\n\r\n  if (isElement(el)) {\r\n    /* istanbul ignore else */\r\n    if (isString(selector)) {\r\n      return [...getEl(selector, el, true)]\r\n    }\r\n  } else {\r\n    return filter(el, selector)\r\n  }\r\n}\r\n\r\nexport default has\r\n","import _getURLPattern from './_getURLPattern'\r\n\r\n/**\r\n * 解析 URL 地址中的相关属性，返回解析后的对象数据\r\n * @method getURLProps\r\n * @since 1.4.0\r\n * @param {String} url\r\n * @return {Object}\r\n */\r\nconst getURLProps = (url = location.href) => {\r\n  const pattern = _getURLPattern()\r\n  const matches = pattern.exec(url)\r\n  const protocol = matches[1] ? matches[1].replace(':', '') : ''\r\n  const host = matches[5]\r\n\r\n  return {\r\n    protocol,\r\n    username: matches[3] || '',\r\n    password: matches[4] || '',\r\n    hostname: matches[6],\r\n    port: matches[13] ? matches[13].replace(':', '') : '',\r\n    host: matches[5],\r\n    pathname: matches[15],\r\n    search: matches[17] || '',\r\n    path: matches[14],\r\n    hash: matches[18] || '',\r\n    href: url,\r\n    origin: protocol + '://' + host\r\n  }\r\n}\r\n\r\nexport default getURLProps\r\n","const _getURLPattern = () => {\r\n  const protocol = '(\\\\w+:)?'\r\n  const user = '([^\\\\/\\\\?\\\\#\\\\:]+)'\r\n  const password = '(.+)'\r\n  const auth = '(' + user + ':' + password + '@)?'\r\n  const address = '(([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*(\\\\.[a-z]{2,})?)+)'\r\n  const ip = '((\\\\d{1,3}\\\\.){3}\\\\d{1,3})'\r\n  const hostname = '(' + address + '|' + ip + ')'\r\n  const port = '(\\\\:\\\\d+)?'\r\n  const host = '(' + hostname + port + ')'\r\n  const pathname = '((\\\\/[-a-z\\\\d%_.~+]*)*)'\r\n  const search = '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'\r\n  const path = '(' + pathname + search + ')*'\r\n  const hash = '(\\\\#[-a-z\\\\d_]*)?'\r\n  const pattern = '^' + protocol + '\\\\/\\\\/' + auth + host + path + hash + '$'\r\n\r\n  return new RegExp(pattern, 'i')\r\n}\r\n\r\nexport default _getURLPattern\r\n","import hasOwn from './utils/lang/hasOwn'\r\nimport getURLSearchParams from './getURLSearchParams'\r\n\r\n/**\r\n * 获取 URL 地址中查询字符串的某个值\r\n * @method getURLSearchParamByName\r\n * @since 1.4.0\r\n * @param {String} prop\r\n * @return {string}\r\n */\r\nconst getURLSearchParamByName = (prop) => {\r\n  const params = getURLSearchParams()\r\n\r\n  return hasOwn(params, prop) ? params[prop] : ''\r\n}\r\n\r\nexport default getURLSearchParamByName\r\n","import isString from './utils/types/isString'\r\nimport isArray from './utils/types/isArray'\r\nimport isElement from './isElement'\r\nimport getSiblings from './getSiblings'\r\nimport getEl from './getEl'\r\n\r\n/**\r\n * 获取 DOM 元素在其父节点中的索引值\r\n * ========================================================================\r\n * @method index\r\n * @param {HTMLElement|String} el\r\n * @param {HTMLElement} [ancestor]\r\n * @return {Number}\r\n */\r\nconst index = function (el, ancestor) {\r\n  /**\r\n   * 返回 target 元素在 siblings 数组的索引值\r\n   * @method indexOf\r\n   * @param {Array} siblings\r\n   * @param {HTMLElement} target\r\n   * @return {number}\r\n   */\r\n  const indexOf = (siblings, target) => {\r\n    let index = -1\r\n\r\n    if (!isArray(siblings) || siblings.length < 1 || !isElement(target)) {\r\n      return index\r\n    }\r\n\r\n    siblings.forEach((sibling, j) => {\r\n      if (sibling === target) {\r\n        index = j\r\n      }\r\n    })\r\n\r\n    return index\r\n  }\r\n  let $el\r\n\r\n  if (isElement(el)) {\r\n    $el = el\r\n  } else if (isString(el)) {\r\n    $el = getEl(el, ancestor)\r\n  }\r\n\r\n  return indexOf(getSiblings($el, true), $el)\r\n}\r\n\r\nexport default index\r\n","import isElement from './isElement'\r\n\r\n/**\r\n * 检测某个 DOM 节点的位置是否在另个一个 DOM 节点范围内\r\n * ========================================================================\r\n * @method inBounding\r\n * @param {HTMLElement} child\r\n * @param {HTMLElement} parent\r\n * @return {Boolean}\r\n */\r\nconst inBounding = (child, parent) => {\r\n  let parentRect\r\n  let childRect\r\n\r\n  if (!isElement(child) || !isElement(parent)) {\r\n    return false\r\n  }\r\n\r\n  parentRect = parent.getBoundingClientRect()\r\n  childRect = child.getBoundingClientRect()\r\n\r\n  return (\r\n    childRect.top >= parentRect.top &&\r\n    childRect.right <= parentRect.right &&\r\n    childRect.bottom <= parentRect.bottom &&\r\n    childRect.left >= parentRect.left\r\n  )\r\n}\r\n\r\nexport default inBounding\r\n","import isElement from './isElement'\r\nimport getViewportHeight from './getViewportHeight'\r\nimport getViewportWidth from './getViewportWidth'\r\n\r\n/**\r\n * 检测 DOM 元素是否在当前视口内可见\r\n * ========================================================================\r\n * @method inViewport\r\n * @param {HTMLElement} el\r\n * @return {Boolean}\r\n */\r\nconst inViewport = (el) => {\r\n  let rect\r\n  let vh\r\n  let vw\r\n\r\n  if (!isElement(el)) {\r\n    return false\r\n  }\r\n\r\n  rect = el.getBoundingClientRect()\r\n  vh = getViewportHeight()\r\n  vw = getViewportWidth()\r\n\r\n  return (\r\n    rect.top >= 0 && rect.left >= 0 && rect.bottom <= vh && rect.right <= vw\r\n  )\r\n}\r\n\r\nexport default inViewport\r\n","import isElement from './isElement'\r\nimport siblings from './siblings'\r\n\r\n/**\r\n * 获取 DOM 元素下所有 HTMKLElement 类型的 DOM 元素\r\n * ========================================================================\r\n * @method childern\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/firstElementChild\r\n * @param {HTMLElement} el\r\n * @return {Array}\r\n */\r\nconst children = (el) => {\r\n  if (!isElement(el)) {\r\n    return []\r\n  }\r\n\r\n  return siblings(el.firstElementChild, true)\r\n}\r\n\r\nexport default children\r\n","import createElement from './createElement'\r\n\r\n/**\r\n * 新窗口打开指定 URL 地址\r\n * =============================================================\r\n * @method openURL\r\n * @since 1.4.0\r\n * @param url\r\n */\r\nconst openURL = (url, target = '_blank') => {\r\n  const CSSRules =\r\n    'position:absolute;z-index:2;top:0;left:-99999px;opacity:0;overflow:hidden;'\r\n  const $anchor = createElement('a', {\r\n    href: url,\r\n    target,\r\n    style: CSSRules\r\n  })\r\n  const $body = document.body\r\n\r\n  $body.appendChild($anchor)\r\n  $anchor.click()\r\n  $body.removeChild($anchor)\r\n}\r\n\r\nexport default openURL\r\n","import isElement from './isElement'\r\nimport isText from './isText'\r\nimport getOffsetParent from './getOffsetParent'\r\nimport getScrollParent from './getScrollParent'\r\nimport getHostOrParent from './getHostOrParent'\r\n\r\n/**\r\n * 获取给定 el 元素的父节点\r\n * ========================================================================\r\n * @method parent\r\n * @param {HTMLElement|Text} el\r\n * @param {String} [type]\r\n * @return {null|*}\r\n */\r\nconst parent = (el, type) => {\r\n  let $parent = null\r\n\r\n  if (!isElement(el) && !isText(el)) {\r\n    return $parent\r\n  }\r\n\r\n  switch (type) {\r\n    case 'offset':\r\n      $parent = getOffsetParent(el)\r\n      break\r\n    case 'scroll':\r\n      $parent = getScrollParent(el)\r\n      break\r\n    default:\r\n      $parent = getHostOrParent(el)\r\n      break\r\n  }\r\n\r\n  return $parent\r\n}\r\n\r\nexport default parent\r\n","import isElement from './isElement'\r\nimport toURLSearchParams from './toURLSearchParams'\r\n\r\n/**\r\n *\r\n * ========================================================================\r\n * @method serialize\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/FormData\r\n * @param {HTMLElement} formElement\r\n */\r\nconst serialize = (formElement, isParams = false) => {\r\n  let serialized = {}\r\n  let data\r\n\r\n  if (!isElement(formElement) || formElement.tagName.toLowerCase() !== 'form') {\r\n    return false\r\n  }\r\n\r\n  data = new FormData(formElement)\r\n\r\n  if (isParams) {\r\n    serialized = toURLSearchParams(data)\r\n  } else {\r\n    for (const [key, value] of data) {\r\n      serialized[key] = value\r\n    }\r\n  }\r\n\r\n  return serialized\r\n}\r\n\r\nexport default serialize\r\n","import isString from './utils/types/isString'\r\nimport isNumber from './utils/types/isNumber'\r\nimport getStyle from './getStyle'\r\n\r\n/**\r\n * @method toREM\r\n * @sice 1.4.0\r\n * @param {String|Number} pixels\r\n * @return {string|string}\r\n */\r\nconst toREM = (pixels, digits = 2) => {\r\n  const base = parseFloat(getStyle(document.documentElement, 'font-size'))\r\n  const size = isString(pixels) ? parseFloat(pixels.replace(/px/i, '')) : pixels\r\n\r\n  return isNumber(size) ? `${((1 / base) * size).toFixed(digits)}rem` : ''\r\n}\r\n\r\nexport default toREM\r\n","import isString from './utils/types/isString'\r\nimport isNumber from './utils/types/isNumber'\r\nimport getStyle from './getStyle'\r\n\r\n/**\r\n * @method toPixels\r\n * @since 1.4.0\r\n * @param rem\r\n * @param digits\r\n * @return {string|string}\r\n */\r\nconst toPixels = (rem, digits = 2) => {\r\n  const base = parseFloat(getStyle(document.documentElement, 'font-size'))\r\n  const size = isString(rem) ? parseFloat(rem.replace(/rem/i, '')) : rem\r\n\r\n  return isNumber(size) ? `${(size * base).toFixed(digits)}px` : ''\r\n}\r\n\r\nexport default toPixels\r\n","/**\n * @method _HSLToRGB\n * @see https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_RGB\n * @param {Number} h\n * @param {Number} s\n * @param {Number} l\n * @returns {number[]}\n * @private\n */\nconst _HSLToRGB = (h, s, l) => {\n  s /= 100\n  l /= 100\n  const k = (n) => (n + h / 30) % 12\n  const a = s * Math.min(l, 1 - l)\n  const f = (n) =>\n    l - a * Math.max(-1, Math.min(k(n) - 3, Math.min(9 - k(n), 1)))\n  return [255 * f(0), 255 * f(8), 255 * f(4)]\n}\n\nexport default _HSLToRGB\n","import _HSLToRGB from './_HSLToRGB'\r\nimport { KEYWORDS, REG_HSL, REG_RGB, REG_HEX3, REG_HEX } from './utils/enum'\r\n\r\n/**\r\n * 返回将指定颜色（颜色英文名称、RGB格式或者 HSL 格式色值）转化成 16 进制色值\r\n * ========================================================================\r\n * @method toHex\r\n * @since 0.4.0\r\n * @param {String} color\r\n * @return {String|Boolean}\r\n */\r\nconst toHex = (color) => {\r\n  let matches = []\r\n  let hex\r\n  let rgb\r\n  let r\r\n  let g\r\n  let b\r\n\r\n  if (!color) {\r\n    return false\r\n  }\r\n\r\n  hex = KEYWORDS[color] || color\r\n\r\n  if (REG_HEX.test(hex)) {\r\n    return hex\r\n  }\r\n\r\n  if (REG_HSL.test(hex)) {\r\n    matches = REG_HSL.exec(hex)\r\n    rgb = _HSLToRGB(\r\n      parseInt(matches[1], 10),\r\n      parseInt(matches[2], 10),\r\n      parseInt(matches[3], 10)\r\n    )\r\n\r\n    return toHex(`rgb(${rgb.join(',')})`)\r\n  } else {\r\n    matches = REG_RGB.exec(hex)\r\n  }\r\n\r\n  if (matches) {\r\n    r = matches[1]?.length === 1 ? '0' + matches[1] : Number(matches[1])\r\n    g = matches[2]?.length === 1 ? '0' + matches[2] : Number(matches[2])\r\n    b = matches[3]?.length === 1 ? '0' + matches[3] : Number(matches[3])\r\n\r\n    hex = [r.toString(16), g.toString(16), b.toString(16)].join('')\r\n  }\r\n\r\n  if (hex.length < 6) {\r\n    hex = hex.replace(REG_HEX3, '$1$1')\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (hex !== 'transparent' && hex.indexOf('#') < 0) {\r\n    hex = '#' + hex\r\n  }\r\n\r\n  return hex.toLowerCase()\r\n}\r\n\r\nexport default toHex\r\n","import _HSLToRGB from './_HSLToRGB'\r\nimport toHex from './toHex'\r\nimport { REG_RGB, REG_HEX, REG_HSL } from './utils/enum'\r\n\r\n/**\r\n * 返回将指定颜色（颜色英文名称、16 进制或者 HSL 色值）转化成 RGB 色值\r\n * ========================================================================\r\n * @method toRGB\r\n * @since 0.4.0\r\n * @param {String} color\r\n * @return {String|Boolean}\r\n */\r\nconst toRGB = (color) => {\r\n  let matches = []\r\n  let hex\r\n  let rgb\r\n  let r\r\n  let g\r\n  let b\r\n\r\n  if (!color) {\r\n    return false\r\n  }\r\n\r\n  if (REG_RGB.test(color)) {\r\n    return color\r\n  }\r\n\r\n  if (REG_HSL.test(color)) {\r\n    matches = REG_HSL.exec(color)\r\n\r\n    rgb = _HSLToRGB(\r\n      parseInt(matches[1], 10),\r\n      parseInt(matches[2], 10),\r\n      parseInt(matches[3], 10)\r\n    )\r\n\r\n    r = rgb[0]\r\n    g = rgb[1]\r\n    b = rgb[2]\r\n  } else {\r\n    /* istanbul ignore else */\r\n    if (!REG_RGB.test(color)) {\r\n      hex = toHex(color)\r\n    }\r\n\r\n    matches = REG_HEX.exec(hex)\r\n\r\n    r = parseInt(matches[1], 16)\r\n    g = parseInt(matches[2], 16)\r\n    b = parseInt(matches[3], 16)\r\n  }\r\n\r\n  return 'rgb(' + [r, g, b].join(', ') + ')'\r\n}\r\n\r\nexport default toRGB\r\n","import getColor from '../getColor'\r\nimport toHex from '../toHex'\r\nimport toHSL from '../toHSL'\r\nimport toRGB from '../toRGB'\r\n\r\nconst DOM = {\r\n  getColor,\r\n  toHex,\r\n  toHSL,\r\n  toRGB\r\n}\r\n\r\nexport default DOM\r\n","import isString from './utils/types/isString'\r\nimport getStyle from './getStyle'\r\nimport toHex from './toHex'\r\nimport toRGB from './toRGB'\r\nimport isElement from './isElement'\r\nimport { COLOR_PROPS } from './utils/enum'\r\n\r\n/**\r\n * 获取DOM 元素 attr 指定的颜色属性值，可以指定 16 进制或者 RGB 格式\r\n * ========================================================================\r\n * @method getColor\r\n * @since 0.4.0\r\n * @param {HTMLElement} el\r\n * @param {String} attr\r\n * @param {Boolean} [isHex]\r\n * @return {String|Boolean}\r\n */\r\nconst getColor = (el, attr, isHex = true) => {\r\n  let color\r\n\r\n  if (!isElement(el) || !isString(attr) || COLOR_PROPS.indexOf(attr) === -1) {\r\n    return false\r\n  }\r\n\r\n  color = getStyle(el, attr)\r\n\r\n  if (!color) {\r\n    return 'transparent'\r\n  }\r\n\r\n  return isHex ? toHex(color) : toRGB(color)\r\n}\r\n\r\nexport default getColor\r\n","import toHex from './toHex'\nimport { REG_RGB, REG_HEX, REG_HSL } from './utils/enum'\n\n/**\n * 指定颜色（颜色英文名称、16 进制或RGB格式色值）转化成 HSL 格式色值\n * ========================================================================\n * @method toHSL\n * @since 1.3.0\n * @see https://www.niwa.nu/2013/05/math-behind-colorspace-conversions-rgb-hsl/\n * @param {String} color\n * @returns {string|boolean}\n */\nconst toHSL = (color) => {\n  let matches = []\n  let hex\n  let r\n  let g\n  let b\n  let l\n  let s\n  let h\n\n  if (!color) {\n    return false\n  }\n\n  if (REG_HSL.test(color)) {\n    return color\n  }\n\n  // hex to hsl\n  if (!REG_RGB.test(color)) {\n    hex = toHex(color)\n    matches = REG_HEX.exec(hex)\n\n    r = parseInt(matches[1], 16)\n    g = parseInt(matches[2], 16)\n    b = parseInt(matches[3], 16)\n  } else {\n    // rgb to hsl\n    matches = REG_RGB.exec(color)\n\n    r = matches[1]\n    g = matches[2]\n    b = matches[3]\n  }\n\n  r /= 255\n  g /= 255\n  b /= 255\n\n  l = Math.max(r, g, b)\n  s = l - Math.min(r, g, b)\n  h = s\n    ? l === r\n      ? (g - b) / s\n      : l === g\n      ? 2 + (b - r) / s\n      : 4 + (r - g) / s\n    : 0\n\n  return `hsl(${60 * h < 0 ? 60 * h + 360 : 60 * h}, ${\n    100 * (s ? (l <= 0.5 ? s / (2 * l - s) : s / (2 - (2 * l - s))) : 0)\n  }%, ${(100 * (2 * l - s)) / 2}%)`\n}\n\nexport default toHSL\n","import isElement from './isElement'\r\nimport isDOM from './isDOM'\r\nimport getNextSibling from './getNextSibling'\r\n\r\n/**\r\n * 在参考节点之后插入一个拥有指定父节点的子节点。函数返回被插入过的子节点；\r\n * 当 newNode 是 DocumentFragment 时，返回空 DocumentFragment。\r\n * ========================================================================\r\n * @method insertAfter\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Node/insertBefore\r\n * @param {Element} el\r\n * @param {HTMLElement} reference\r\n * @return {HTMLElement|null}\r\n */\r\nconst insertAfter = (el, reference) => {\r\n  let $parent\r\n  let $nextSibling\r\n\r\n  if (!isDOM(el)) {\r\n    return null\r\n  }\r\n\r\n  $parent = reference.parentNode\r\n\r\n  if (!$parent) {\r\n    return null\r\n  }\r\n\r\n  $nextSibling = getNextSibling(reference)\r\n\r\n  if ($nextSibling) {\r\n    return $parent.insertBefore(el, $nextSibling)\r\n  } else {\r\n    return $parent.appendChild(el)\r\n  }\r\n}\r\n\r\nexport default insertAfter\r\n","import isElement from './isElement'\r\nimport isDOM from './isDOM'\r\n\r\n/**\r\n * 在参考节点之前插入一个拥有指定父节点的子节点。函数返回被插入过的子节点；\r\n * 当 newNode 是 DocumentFragment 时，返回空 DocumentFragment。\r\n * ========================================================================\r\n * @method insertBefore\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Node/insertBefore\r\n * @param {Element} el\r\n * @param {Element} reference\r\n * @return {Element|null}\r\n */\r\nconst insertBefore = (el, reference) => {\r\n  let $parent\r\n\r\n  if (!isDOM(el)) {\r\n    return null\r\n  }\r\n\r\n  $parent = reference.parentNode\r\n\r\n  if (!$parent) {\r\n    return null\r\n  }\r\n\r\n  return $parent.insertBefore(el, reference)\r\n}\r\n\r\nexport default insertBefore\r\n","import isHTML from './utils/types/isHTML'\r\nimport isElement from './isElement'\r\nimport getEl from './getEl'\r\nimport stripScripts from './utils/string/stripScripts'\r\nimport html from './html'\r\nimport encodeHTML from './utils/string/encodeHTML'\r\nimport text from './text'\r\n\r\n/**\r\n * 方法将指定的文本解析为 Element 元素，并将结果节点插入到 DOM 树中的指定位置。它不会\r\n * 重新解析它正在使用的元素，因此它不会破坏元素内的现有元素。这避免了额外的序列化步骤，\r\n * 使其比直接使用 innerHTML 操作更快。\r\n * ========================================================================\r\n * @method _insertAdjacentHTML\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/insertAdjacentHTML\r\n * @param {HTMLElement|String} el\r\n * @param {String} position - 一个 DOMString，表示插入内容相对于元素的位置，并且必须是以下字符串之一：\r\n *                            'beforebegin'：元素自身的前面。\r\n *                            'afterbegin'：插入元素内部的第一个子节点之前。\r\n *                            'beforeend'：插入元素内部的最后一个子节点之后。\r\n *                            'afterend'：元素自身的后面。\r\n * @param {String} str\r\n * @param {Boolean} [dangerouslyUseHTMLString]\r\n * @return {Element|Text|null}\r\n * @private\r\n */\r\nconst _insertAdjacentHTML = (\r\n  el,\r\n  position,\r\n  str,\r\n  dangerouslyUseHTMLString = true\r\n) => {\r\n  const POSITIONS = ['beforebegin', 'afterbegin', 'beforeend', 'afterend']\r\n  let insertHTML = str\r\n  let $el\r\n  let $parent\r\n\r\n  if (!el || POSITIONS.indexOf(position) === -1 || !isHTML(insertHTML)) {\r\n    return null\r\n  }\r\n\r\n  $el = isElement(el) ? el : getEl(el)\r\n\r\n  if (!$el) {\r\n    return null\r\n  }\r\n\r\n  // 'afterend' 和 'beforebegin' 位置，仅在 el 节点在树中且节点具有一个 parent 元素时工作\r\n  /* istanbul ignore else */\r\n  if (position === 'beforebegin' || position === 'afterend') {\r\n    $parent = $el.parentNode\r\n\r\n    /* istanbul ignore else */\r\n    if (!$parent) {\r\n      return null\r\n    }\r\n  }\r\n\r\n  if (dangerouslyUseHTMLString) {\r\n    insertHTML = stripScripts(insertHTML)\r\n    $el.insertAdjacentHTML(position, insertHTML)\r\n    return html(insertHTML)\r\n  } else {\r\n    insertHTML = encodeHTML(insertHTML)\r\n    $el.insertAdjacentText(position, insertHTML)\r\n    return text(insertHTML)\r\n  }\r\n}\r\n\r\nexport default _insertAdjacentHTML\r\n","/**\r\n * 转义字符串中的 HTML 标签\r\n * ========================================================================\r\n * @param {String} str - 需要转义的字符串\r\n * @returns {String}\r\n */\r\nconst encodeHTML = (str) => {\r\n  const CHARTS = {\r\n    '&': '&amp;',\r\n    '<': '&lt;',\r\n    '>': '&gt;',\r\n    \"'\": '&#39;',\r\n    '\"': '&quot;'\r\n  }\r\n\r\n  return str.replace(/[&<>'\"]/g, (tag) => {\r\n    return CHARTS[tag] || tag\r\n  })\r\n}\r\n\r\nexport default encodeHTML\r\n","import _insertAdjacentHTML from './_insertAdjacentHTML'\r\n\r\n/**\r\n * 将指定的文本解析为 Element 元素，并将结果节点插入到 DOM 树中的指定 DOM 节点之后。\r\n * ========================================================================\r\n * @method insertHTMLAfterEnd\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/insertAdjacentHTML\r\n * @param {HTMLElement|String} el\r\n * @param {String} str\r\n * @param {Boolean} [dangerouslyUseHTMLString]\r\n * @return {Element|null}\r\n */\r\nconst insertHTMLAfterEnd = (el, str, dangerouslyUseHTMLString = true) => {\r\n  return _insertAdjacentHTML(el, 'afterend', str, dangerouslyUseHTMLString)\r\n}\r\n\r\nexport default insertHTMLAfterEnd\r\n","import _insertAdjacentHTML from './_insertAdjacentHTML'\r\n\r\n/**\r\n * 在指定元素的开头插入HTML字符串。\r\n * ========================================================================\r\n * @method insertHTMLBeforeBegin\r\n * @param {HTMLElement|String} el\r\n * @param {String} str\r\n * @param {Boolean} [dangerouslyUseHTMLString]\r\n * @return {Element|null}\r\n */\r\nconst insertHTMLBeforeBegin = (el, str, dangerouslyUseHTMLString = true) => {\r\n  return _insertAdjacentHTML(el, 'beforebegin', str, dangerouslyUseHTMLString)\r\n}\r\n\r\nexport default insertHTMLBeforeBegin\r\n","import _insertAdjacentHTML from './_insertAdjacentHTML'\r\n\r\n/**\r\n * 来将指定的文本解析为 Element 元素，并将结果节点插入元素内部的最后一个子节点之后。\r\n * ========================================================================\r\n * @method insertHTMLBeforeEnd\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/insertAdjacentHTML\r\n * @param {HTMLElement|String} el\r\n * @param {String} str\r\n * @param {Boolean} [dangerouslyUseHTMLString]\r\n * @return {Element|null}\r\n */\r\nconst insertHTMLBeforeEnd = (el, str, dangerouslyUseHTMLString = true) => {\r\n  return _insertAdjacentHTML(el, 'beforeend', str, dangerouslyUseHTMLString)\r\n}\r\n\r\nexport default insertHTMLBeforeEnd\r\n","import isHTML from './utils/types/isHTML'\r\nimport isDOM from './isDOM'\r\nimport isElement from './isElement'\r\nimport insertBefore from './insertBefore'\r\nimport insertHTMLBeforeBegin from './insertHTMLBeforeBegin'\r\n\r\n/**\r\n * 在指定 DOM 节点后添加子节点或者将 HTML 字符转化成节点添加到前面\r\n * ========================================================================\r\n * @method after\r\n * @param {HTMLElement|String} el\r\n * @param {HTMLElement} reference\r\n * @return {Element|null}\r\n */\r\nconst before = (el, reference) => {\r\n  if (!isElement(reference) || (!isDOM(el) && !isHTML(el))) {\r\n    return null\r\n  }\r\n\r\n  if (isDOM(el)) {\r\n    return insertBefore(el, reference)\r\n  } else {\r\n    return insertHTMLBeforeBegin(reference, el)\r\n  }\r\n}\r\n\r\nexport default before\r\n","import toCamel from './utils/string/toCamel'\r\nimport isString from './utils/types/isString'\r\nimport isUndefined from './utils/types/isUndefined'\r\nimport isElement from './isElement'\r\n\r\n/**\r\n * 给 DOM 元素添加 CSS 样式\r\n * ========================================================================\r\n * @method setStyle\r\n * @param {HTMLElement} el\r\n * @param {String} attr\r\n * @param {String} val\r\n */\r\nconst setStyle = (el, attr, val) => {\r\n  let prop\r\n\r\n  if (!isElement(el) || !isString(attr) || isUndefined(attr)) {\r\n    return false\r\n  }\r\n\r\n  prop = toCamel(attr)\r\n\r\n  if (prop === 'float') {\r\n    prop = 'cssFloat'\r\n  }\r\n\r\n  el.style[prop] = val\r\n}\r\n\r\nexport default setStyle\r\n","import isElement from './isElement'\r\nimport getStyle from './getStyle'\r\nimport setStyle from './setStyle'\r\n\r\n/**\r\n * 隐藏指定 DOM 元素\r\n * ========================================================================\r\n * @method toggle\r\n * @param {HTMLElement} el\r\n */\r\nconst hide = (el) => {\r\n  if (!isElement(el) || getStyle(el, 'display') === 'none') {\r\n    return false\r\n  }\r\n\r\n  setStyle(el, 'display', 'none')\r\n}\r\n\r\nexport default hide\r\n","import isHTML from './utils/types/isHTML'\r\nimport isFunction from './utils/types/isFunction'\r\nimport isDOM from './isDOM'\r\nimport isElement from './isElement'\r\nimport insertAfter from './insertAfter'\r\nimport insertHTMLAfterEnd from './insertHTMLAfterEnd'\r\nimport hide from './hide'\r\n\r\n/**\r\n * 用指定 DOM 节点或者将 HTML 字符转化成节点替换 reference 节点\r\n * ========================================================================\r\n * @method replace\r\n * @since 1.1.0\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/replaceWith\r\n * @param {HTMLElement|String} el\r\n * @param {HTMLElement} reference\r\n * @return {Element|null}\r\n */\r\nconst replace = (el, reference) => {\r\n  let $replace\r\n  let $parent\r\n\r\n  /* istanbul ignore else */\r\n  if (!isElement(reference) || (!isDOM(el) && !isHTML(el))) {\r\n    return null\r\n  }\r\n\r\n  $parent = reference.parentNode\r\n\r\n  if (!$parent) {\r\n    return null\r\n  }\r\n\r\n  hide(reference)\r\n\r\n  if (isDOM(el)) {\r\n    $replace = insertAfter(el, reference)\r\n  } else {\r\n    $replace = insertHTMLAfterEnd(reference, el)\r\n  }\r\n\r\n  if (isFunction(reference.replaceWith)) {\r\n    reference.replaceWith($replace)\r\n  } else {\r\n    reference.remove()\r\n  }\r\n\r\n  return $replace\r\n}\r\n\r\nexport default replace\r\n","import isString from './utils/types/isString'\r\nimport isFunction from './utils/types/isFunction'\r\nimport isElement from './isElement'\r\nimport getEl from './getEl'\r\n\r\n/**\r\n * 移除指定 DOM 元素\r\n * ========================================================================\r\n * @method remove\r\n * @since 1.3.1\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/remove\r\n * @param {HTMLElement|String} el\r\n * @return {boolean}\r\n */\r\nconst remove = (el) => {\r\n  let $el\r\n\r\n  if (!isElement(el) && !isString(el)) {\r\n    return false\r\n  }\r\n\r\n  if (isElement(el)) {\r\n    if (isFunction(el.remove)) {\r\n      el.remove()\r\n    } else {\r\n      el.parentNode.removeChild(el)\r\n    }\r\n  } else {\r\n    $el = getEl(el)\r\n\r\n    if (isElement($el)) {\r\n      remove($el)\r\n    }\r\n  }\r\n}\r\n\r\nexport default remove\r\n","import isElement from './isElement'\r\nimport getStyle from './getStyle'\r\nimport setStyle from './setStyle'\r\n\r\n/**\r\n * 隐藏指定 DOM 元素\r\n * ========================================================================\r\n * @method toggle\r\n * @param {HTMLElement} el\r\n */\r\nconst show = (el) => {\r\n  if (!isElement(el) || getStyle(el, 'display') === 'block') {\r\n    return false\r\n  }\r\n\r\n  setStyle(el, 'display', 'block')\r\n}\r\n\r\nexport default show\r\n","import insertAfter from '../insertAfter'\r\nimport insertBefore from '../insertBefore'\r\nimport insertHTMLAfterBegin from '../insertHTMLAfterBegin'\r\nimport insertHTMLAfterEnd from '../insertHTMLAfterEnd'\r\nimport insertHTMLBeforeBegin from '../insertHTMLBeforeBegin'\r\nimport insertHTMLBeforeEnd from '../insertHTMLBeforeEnd'\r\nimport append from '../append'\r\nimport prepend from '../prepend'\r\nimport after from '../after'\r\nimport before from '../before'\r\nimport replace from '../replace'\r\nimport remove from '../remove'\r\nimport unwrap from '../unwrap'\r\nimport wrap from '../wrap'\r\nimport wrapAll from '../wrapAll'\r\nimport wrapInner from '../wrapInner'\r\n\r\nconst DOM = {\r\n  insertAfter,\r\n  insertBefore,\r\n  insertHTMLAfterBegin,\r\n  insertHTMLAfterEnd,\r\n  insertHTMLBeforeBegin,\r\n  insertHTMLBeforeEnd,\r\n  append,\r\n  prepend,\r\n  after,\r\n  before,\r\n  replace,\r\n  remove,\r\n  unwrap,\r\n  wrap,\r\n  wrapAll,\r\n  wrapInner\r\n}\r\n\r\nexport default DOM\r\n","import _insertAdjacentHTML from './_insertAdjacentHTML'\r\n\r\n/**\r\n * 将指定的文本解析为 Element 元素，并将结果节点插入 el 元素内部的第一个子节点之前。\r\n * ========================================================================\r\n * @method insertHTMLAfterBegin\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/insertAdjacentHTML\r\n * @param {HTMLElement|String} el\r\n * @param {String} str\r\n * @param {Boolean} [dangerouslyUseHTMLString]\r\n * @return {Element|null}\r\n */\r\nconst insertHTMLAfterBegin = (el, str, dangerouslyUseHTMLString = true) => {\r\n  return _insertAdjacentHTML(el, 'afterbegin', str, dangerouslyUseHTMLString)\r\n}\r\n\r\nexport default insertHTMLAfterBegin\r\n","import isString from './utils/types/isString'\r\nimport isHTML from './utils/types/isHTML'\r\nimport isDOM from './isDOM'\r\nimport isElement from './isElement'\r\nimport text from './text'\r\nimport insertAfter from './insertAfter'\r\nimport insertHTMLBeforeEnd from './insertHTMLBeforeEnd'\r\nimport isFunction from './utils/types/isFunction'\r\nimport html from './html'\r\n\r\n/**\r\n * 将指定 DOM 节点或者 html 文本解析为 Element 元素，并将结果节点插入 el 元素自身\r\n * 内部的最后面。\r\n * ========================================================================\r\n * @method prepend\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/append\r\n * @param {HTMLElement|String} el\r\n * @param {HTMLElement} reference\r\n * @return {Element|Text|null}\r\n */\r\nconst append = (el, reference) => {\r\n  let $target\r\n\r\n  if (!isElement(reference) || (!isHTML(el) && !isString(el) && !isDOM(el))) {\r\n    return null\r\n  }\r\n\r\n  if (isFunction(reference.append)) {\r\n    if (isDOM(el)) {\r\n      $target = el\r\n    } else if (isHTML(el)) {\r\n      $target = html(el)\r\n    } else {\r\n      $target = text(el)\r\n    }\r\n\r\n    reference.append($target)\r\n\r\n    return $target\r\n  } else {\r\n    $target = reference.lastChild\r\n  }\r\n\r\n  if (isDOM(el)) {\r\n    return insertAfter(el, $target)\r\n  } else if (isHTML(el)) {\r\n    return insertHTMLBeforeEnd($target, el)\r\n  } else {\r\n    return insertAfter(text(el), $target)\r\n  }\r\n}\r\n\r\nexport default append\r\n","import isHTML from './utils/types/isHTML'\r\nimport isString from './utils/types/isString'\r\nimport isFunction from './utils/types/isFunction'\r\nimport isDOM from './isDOM'\r\nimport isElement from './isElement'\r\nimport text from './text'\r\nimport html from './html'\r\nimport insertBefore from './insertBefore'\r\nimport insertHTMLBeforeBegin from './insertHTMLBeforeBegin'\r\n\r\n/**\r\n * 将指定 DOM 节点或者 html 文本解析为 Element 元素，并将结果节点插入 reference 元素\r\n * 自身内部的最前面或者 reference 元素前面。\r\n * ========================================================================\r\n * @method prepend\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/prepend\r\n * @param {HTMLElement|String} el\r\n * @param {HTMLElement} reference\r\n * @return {Element|Text|null}\r\n */\r\nconst prepend = (el, reference) => {\r\n  let $target\r\n\r\n  if (!isElement(reference) || (!isHTML(el) && !isString(el) && !isDOM(el))) {\r\n    return null\r\n  }\r\n\r\n  if (isFunction(reference.prepend)) {\r\n    if (isDOM(el)) {\r\n      $target = el\r\n    } else if (isHTML(el)) {\r\n      $target = html(el)\r\n    } else {\r\n      $target = text(el)\r\n    }\r\n\r\n    reference.prepend($target)\r\n\r\n    return $target\r\n  } else {\r\n    $target = reference.firstChild\r\n  }\r\n\r\n  if (isDOM(el)) {\r\n    return insertBefore(el, $target)\r\n  } else if (isHTML(el)) {\r\n    return insertHTMLBeforeBegin($target, el)\r\n  } else {\r\n    return insertBefore(text(el), $target)\r\n  }\r\n}\r\n\r\nexport default prepend\r\n","import isHTML from './utils/types/isHTML'\r\nimport isDOM from './isDOM'\r\nimport isElement from './isElement'\r\nimport insertAfter from './insertAfter'\r\nimport insertHTMLAfterEnd from './insertHTMLAfterEnd'\r\n\r\n/**\r\n * 在指定 DOM 节点后添加子节点或者将 HTML 字符转化成节点添加到后面\r\n * ========================================================================\r\n * @method after\r\n * @param {HTMLElement|String} el\r\n * @param {HTMLElement} reference\r\n * @return {Element|null}\r\n */\r\nconst after = (el, reference) => {\r\n  /* istanbul ignore else */\r\n  if (!isElement(reference) || (!isDOM(el) && !isHTML(el))) {\r\n    return null\r\n  }\r\n\r\n  if (isDOM(el)) {\r\n    return insertAfter(el, reference)\r\n  } else {\r\n    return insertHTMLAfterEnd(reference, el)\r\n  }\r\n}\r\n\r\nexport default after\r\n","import isString from './utils/types/isString'\r\nimport isCollection from './isCollection'\r\nimport replace from './replace'\r\nimport isMatched from './isMatched'\r\n\r\n/**\r\n * 从 DOM 中移除匹配元素集的父元素，将匹配的元素保留在它们的位置\r\n * ========================================================================\r\n * @method unwrap\r\n * @since 1.1.0\r\n * @param {HTMLCollection|NodeList} collection\r\n * @param {String} selector\r\n */\r\nconst unwrap = (collection, selector) => {\r\n  let $collection = []\r\n\r\n  if (!isCollection(collection) || !isString(selector)) {\r\n    return false\r\n  }\r\n\r\n  $collection = [...collection]\r\n\r\n  if ($collection.length < 1) {\r\n    return false\r\n  }\r\n\r\n  $collection.forEach(($node, i) => {\r\n    const $parent = $node.parentNode\r\n\r\n    /* istanbul ignore else */\r\n    if (isMatched($parent, selector)) {\r\n      replace($node, $parent)\r\n    }\r\n  })\r\n}\r\n\r\nexport default unwrap\r\n","import isFunction from './utils/types/isFunction'\r\nimport isString from './utils/types/isString'\r\nimport isHTML from './utils/types/isHTML'\r\nimport isElement from './isElement'\r\nimport isCollection from './isCollection'\r\nimport getEl from './getEl'\r\nimport build from './build'\r\nimport clone from './clone'\r\nimport replace from './replace'\r\n\r\n/**\r\n * 给 NodeList 中的每个 DOM 节点包裹上指定 HTML 标签\r\n * ========================================================================\r\n * @method wrap\r\n * @since 1.1.0\r\n * @param {HTMLCollection|NodeList} collection\r\n * @param {String|HTMLElement|Function} wrapElement\r\n */\r\nconst wrap = (collection, wrapElement) => {\r\n  let $collection = []\r\n  let $temp\r\n  let strHTML\r\n  let $return\r\n\r\n  /* istanbul ignore else */\r\n  if (\r\n    !isCollection(collection) ||\r\n    (!isHTML(wrapElement) &&\r\n      !isString(wrapElement) &&\r\n      !isElement(wrapElement) &&\r\n      !isFunction(wrapElement))\r\n  ) {\r\n    return false\r\n  }\r\n\r\n  $collection = [...collection]\r\n\r\n  if ($collection.length < 1) {\r\n    return false\r\n  }\r\n\r\n  $collection.forEach(($node, i) => {\r\n    if (isHTML(wrapElement)) {\r\n      // HTML 字符串\r\n      strHTML = build(wrapElement).outerHTML\r\n    } else if (isString(wrapElement) && isElement(getEl(wrapElement))) {\r\n      // DOM 元素的选择器\r\n      strHTML = clone(getEl(wrapElement), true).outerHTML\r\n    } else if (isElement(wrapElement)) {\r\n      // DOM 元素\r\n      strHTML = clone(wrapElement, true).outerHTML\r\n    } else {\r\n      $return = wrapElement($node, i)\r\n      // Function 返回 DOM 元素\r\n      if (isElement($return)) {\r\n        strHTML = clone($return, true).outerHTML\r\n      } else {\r\n        // Function 返回（HTML）字符串\r\n        strHTML = build(wrapElement($node, i)).outerHTML\r\n      }\r\n    }\r\n\r\n    strHTML = strHTML.replace(\r\n      />(?:\\s*)<\\//,\r\n      `>${clone($node, true).outerHTML}</`\r\n    )\r\n    $temp = build(strHTML)\r\n\r\n    /* istanbul ignore else */\r\n    if ($temp) {\r\n      replace($temp, $node)\r\n    }\r\n  })\r\n}\r\n\r\nexport default wrap\r\n","import isFunction from './utils/types/isFunction'\r\nimport isHTML from './utils/types/isHTML'\r\nimport isString from './utils/types/isString'\r\nimport isElement from './isElement'\r\nimport isCollection from './isCollection'\r\nimport hide from './hide'\r\nimport show from './show'\r\nimport before from './before'\r\nimport build from './build'\r\nimport getEl from './getEl'\r\nimport clone from './clone'\r\n\r\n/**\r\n * 给（以组邻近的）NodeList 包裹上指定的 HTML 标签\r\n * ========================================================================\r\n * @method wrap\r\n * @since 1.1.0\r\n * @param {HTMLCollection|NodeList} collection\r\n * @param {String|HTMLElement|Function} wrapElement\r\n */\r\nconst wrapAll = (collection, wrapElement) => {\r\n  let $collection = []\r\n  let warpHTML = ''\r\n  let strHTML = ''\r\n  let $temp\r\n  let $first\r\n  let $return\r\n\r\n  /* istanbul ignore else */\r\n  if (\r\n    !isCollection(collection) ||\r\n    (!isHTML(wrapElement) &&\r\n      !isString(wrapElement) &&\r\n      !isElement(wrapElement) &&\r\n      !isFunction(wrapElement))\r\n  ) {\r\n    return false\r\n  }\r\n\r\n  $collection = [...collection]\r\n\r\n  if ($collection.length < 1) {\r\n    return false\r\n  }\r\n\r\n  $first = $collection[0]\r\n\r\n  if (isHTML(wrapElement)) {\r\n    warpHTML = wrapElement\r\n  } else if (isString(wrapElement) && isElement(getEl(wrapElement))) {\r\n    warpHTML = clone(getEl(wrapElement), true).outerHTML\r\n  } else if (isElement(wrapElement)) {\r\n    warpHTML = clone(wrapElement, true).outerHTML\r\n  } else {\r\n    $return = wrapElement()\r\n\r\n    if (isElement($return)) {\r\n      warpHTML = clone($return, true).outerHTML\r\n    } else {\r\n      warpHTML = build($return).outerHTML\r\n    }\r\n  }\r\n\r\n  $temp = build(warpHTML)\r\n  hide($temp)\r\n  before($temp, $first)\r\n\r\n  $collection.forEach(($node, i) => {\r\n    strHTML += $node.outerHTML\r\n    hide($node)\r\n    $node.remove()\r\n  })\r\n\r\n  strHTML = warpHTML.replace(/>(?:\\s*)<\\//, `>${strHTML}</`)\r\n  $temp.outerHTML = strHTML\r\n\r\n  show($temp)\r\n}\r\n\r\nexport default wrapAll\r\n","import isFunction from './utils/types/isFunction'\r\nimport isString from './utils/types/isString'\r\nimport isHTML from './utils/types/isHTML'\r\nimport isElement from './isElement'\r\nimport isCollection from './isCollection'\r\nimport build from './build'\r\nimport clone from './clone'\r\nimport getEl from './getEl'\r\n\r\n/**\r\n * 给 NodeList 中的每个 DOM 节点内部包裹上指定 HTML 标签\r\n * ========================================================================\r\n * @method wrapInner\r\n * @since 1.1.0\r\n * @param {HTMLCollection|NodeList} collection\r\n * @param {String|HTMLElement|Function} wrapElement\r\n */\r\nconst wrapInner = (collection, wrapElement) => {\r\n  let $collection = []\r\n  let strHTML = ''\r\n  let wrapHTML = ''\r\n  let $return\r\n\r\n  /* istanbul ignore else */\r\n  if (\r\n    !isCollection(collection) ||\r\n    (!isHTML(wrapElement) &&\r\n      !isString(wrapElement) &&\r\n      !isElement(wrapElement) &&\r\n      !isFunction(wrapElement))\r\n  ) {\r\n    return false\r\n  }\r\n\r\n  $collection = [...collection]\r\n\r\n  if ($collection.length < 1) {\r\n    return false\r\n  }\r\n\r\n  $collection.forEach(($node, i) => {\r\n    strHTML = $node.innerHTML\r\n\r\n    // HTML 字符串\r\n    if (isHTML(wrapElement)) {\r\n      wrapHTML = build(wrapElement).outerHTML\r\n    } else if (isString(wrapElement) && isElement(getEl(wrapElement))) {\r\n      // DOM 元素选择器\r\n      wrapHTML = clone(getEl(wrapElement), true).outerHTML\r\n    } else if (isElement(wrapElement)) {\r\n      // DOM 元素\r\n      wrapHTML = clone(wrapElement, true).outerHTML\r\n    } else {\r\n      $return = wrapElement($node, i)\r\n\r\n      // Function 返回 DOM 元素\r\n      if (isElement($return)) {\r\n        wrapHTML = clone($return, true).outerHTML\r\n      } else {\r\n        // Function 返回（HTML）字符串\r\n        wrapHTML = build($return).outerHTML\r\n      }\r\n    }\r\n\r\n    strHTML = wrapHTML.replace(/>(?:\\s*)<\\//, `>${strHTML}</`)\r\n    $node.innerHTML = strHTML\r\n  })\r\n}\r\n\r\nexport default wrapInner\r\n","import isBrowser from '../isBrowser'\r\nimport isDeno from '../isDeno'\r\nimport isNode from '../isNode'\r\nimport isMobile from '../isMobile'\r\nimport isWebKit from '../isWebKit'\r\nimport browser from '../browser'\r\nimport os from '../os'\r\n\r\nconst DOM = {\r\n  isBrowser,\r\n  isDeno,\r\n  isNode,\r\n  isMobile,\r\n  isWebKit,\r\n  browser,\r\n  os\r\n}\r\n\r\nexport default DOM\r\n","/**\r\n * 检测当前运行环境是否为浏览器\r\n * ========================================================================\r\n * @method isBrowser\r\n * @return {Boolean}\r\n */\r\nconst isBrowser = () => {\r\n  return ![typeof window, typeof document].includes('undefined')\r\n}\r\n\r\nexport default isBrowser\r\n","/**\r\n * 检测当前运行环境是否为 Done 环境\r\n * ========================================================================\r\n * @method isDeno\r\n * @return {boolean}\r\n */\r\nconst isDeno = () => {\r\n  try {\r\n    return Deno?.core !== 'undefined'\r\n  } catch (e) {\r\n    return false\r\n  }\r\n}\r\n\r\nexport default isDeno\r\n","/**\r\n * 检测当前运行环境是否为 Node.js 环境\r\n * ========================================================================\r\n * @method isNode\r\n * @return {boolean}\r\n */\r\nconst isNode = () => {\r\n  return (\r\n    typeof process !== 'undefined' &&\r\n    !!process.versions &&\r\n    !!process.versions.node\r\n  )\r\n}\r\n\r\nexport default isNode\r\n","/**\r\n * 检测当前设备是否为移动设备\r\n * ========================================================================\r\n * @method isMobile\r\n * @return {boolean}\r\n */\r\nconst isMobile = () => {\r\n  const ua = navigator.userAgent\r\n\r\n  return /Mobile|mini|Fennec|Android|iP(ad|od|hone)|NokiaN[^\\/]*/.test(ua)\r\n}\r\n\r\nexport default isMobile\r\n","/**\r\n * 检测当前浏览器引擎是否为 WebKit 内核\r\n * ========================================================================\r\n * @method isWebKit\r\n * @return {string|boolean}\r\n */\r\nconst isWebKit = () => {\r\n  const ua = navigator.userAgent\r\n  const matches = ua.match(/AppleWebKit\\/(\\S*)/)\r\n\r\n  if (/KHTML/.test(ua)) {\r\n    return true\r\n  }\r\n\r\n  return matches && matches[1]\r\n}\r\n\r\nexport default isWebKit\r\n","/**\r\n * 检测浏览器信息，返回浏览器名称和版本信息\r\n * ========================================================================\r\n * @method browser\r\n * @see https://stackoverflow.com/questions/9514179/how-to-find-the-operating-system-details-using-javascript\r\n * @return {{major: number, name: string, version: string}}\r\n */\r\nconst browser = () => {\r\n  const ua = navigator.userAgent\r\n  let index = 0\r\n  let name = 'unknown'\r\n  let major = ''\r\n  let version = '--'\r\n\r\n  // Opera\r\n  if (ua.indexOf('Opera') !== -1) {\r\n    index = ua.indexOf('Opera')\r\n    name = 'Opera'\r\n    version = ua.substring(index + 6)\r\n\r\n    if (ua.indexOf('Version') !== -1) {\r\n      index = ua.indexOf('Version')\r\n      version = ua.substring(index + 8)\r\n    }\r\n  }\r\n  // MSIE\r\n  else if (ua.indexOf('MSIE') !== -1) {\r\n    index = ua.indexOf('MSIE')\r\n    name = 'IE'\r\n    version = ua.substring(index + 5)\r\n  }\r\n  // Edge\r\n  else if (ua.indexOf('Edg') !== -1) {\r\n    index = ua.indexOf('Edg')\r\n    name = 'Edge'\r\n    version = ua.substring(index + 4)\r\n  }\r\n  // Chrome\r\n  else if (ua.indexOf('Chrome') !== -1) {\r\n    index = ua.indexOf('Chrome')\r\n    name = 'Chrome'\r\n    version = ua.substring(index + 7)\r\n  }\r\n  // Safari\r\n  else if (ua.indexOf('Safari') !== -1) {\r\n    index = ua.indexOf('Safari')\r\n    name = 'Safari'\r\n    version = ua.substring(index + 7)\r\n\r\n    if (ua.indexOf('Version') !== -1) {\r\n      index = ua.indexOf('Version')\r\n      version = ua.substring(index + 8)\r\n    }\r\n  }\r\n  // Firefox\r\n  else if (ua.indexOf('Firefox') !== -1) {\r\n    index = ua.indexOf('Firefox')\r\n    name = 'Firefox'\r\n    version = ua.substring(index + 8)\r\n  }\r\n  // MSIE 11+\r\n  else if (ua.indexOf('Trident/') !== -1) {\r\n    name = 'IE 11'\r\n    version = ua.substring(ua.indexOf('rv:') + 3)\r\n  }\r\n  // Other browsers\r\n  else if (ua.lastIndexOf(' ') + 1 < ua.lastIndexOf('/')) {\r\n    index = ua.lastIndexOf('/')\r\n    name = ua.substring(ua.lastIndexOf(' ') + 1, index)\r\n    version = ua.substring(index + 1)\r\n\r\n    if (name.toLowerCase() == name.toUpperCase()) {\r\n      name = navigator.appName || 'unknown'\r\n    }\r\n  }\r\n\r\n  // trim the version string\r\n  if (version.indexOf(';') !== -1) {\r\n    index = version.indexOf(';')\r\n  } else if (version.indexOf(' ') !== -1) {\r\n    index = version.indexOf(' ')\r\n  } else if (version.indexOf(')') !== -1) {\r\n    index = version.indexOf(')')\r\n  }\r\n\r\n  if (index > -1) {\r\n    version = version.substring(0, index)\r\n  }\r\n\r\n  major = parseInt('' + version, 10)\r\n\r\n  if (isNaN(major)) {\r\n    version = '' + parseFloat(navigator.appVersion)\r\n    major = parseInt(navigator.appVersion, 10)\r\n  }\r\n\r\n  return {\r\n    name,\r\n    major,\r\n    version\r\n  }\r\n}\r\n\r\nexport default browser\r\n","/**\r\n * 检测当前操作系统信息，返回操作名称合版本信息\r\n * ========================================================================\r\n * @method os\r\n * @see https://stackoverflow.com/questions/9514179/how-to-find-the-operating-system-details-using-javascript\r\n * @return {{name: string, version: string}}\r\n */\r\nconst os = () => {\r\n  const PLATFORMS = [\r\n    {\r\n      name: 'Windows 10',\r\n      pattern: /(Windows (NT)? 10.0)/\r\n    },\r\n    {\r\n      name: 'Windows 8.1',\r\n      pattern: /(Windows 8.1|Windows NT 6.3)/\r\n    },\r\n    {\r\n      name: 'Windows 8',\r\n      pattern: /(Windows 8|Windows NT 6.2)/\r\n    },\r\n    {\r\n      name: 'Windows 7',\r\n      pattern: /(Windows 7|Windows NT 6.1)/\r\n    },\r\n    {\r\n      name: 'Windows Vista',\r\n      pattern: /Windows NT 6.0/\r\n    },\r\n    {\r\n      name: 'Windows Server 2003',\r\n      pattern: /Windows NT 5.2/\r\n    },\r\n    {\r\n      name: 'Windows XP',\r\n      pattern: /(Windows NT 5.1|Windows XP)/\r\n    },\r\n    {\r\n      name: 'Windows 2000',\r\n      pattern: /(Windows NT 5.0|Windows 2000)/\r\n    },\r\n    {\r\n      name: 'Windows ME',\r\n      pattern: /(Win 9x 4.90|Windows ME)/\r\n    },\r\n    {\r\n      name: 'Windows 98',\r\n      pattern: /(Windows 98|Win98)/\r\n    },\r\n    {\r\n      name: 'Windows 95',\r\n      pattern: /(Windows 95|Win95|Windows_95)/\r\n    },\r\n    {\r\n      name: 'Windows NT 4.0',\r\n      pattern: /(Windows (NT)? 4.0|WinNT4.0|WinNT)/\r\n    },\r\n    {\r\n      name: 'Windows CE',\r\n      pattern: /Windows CE/\r\n    },\r\n    {\r\n      name: 'Windows 3.11',\r\n      pattern: /Win16/\r\n    },\r\n    {\r\n      name: 'Android',\r\n      pattern: /Android/\r\n    },\r\n    {\r\n      name: 'Open BSD',\r\n      pattern: /OpenBSD/\r\n    },\r\n    {\r\n      name: 'Sun OS',\r\n      pattern: /SunOS/\r\n    },\r\n    {\r\n      name: 'Linux',\r\n      pattern: /(Linux|X11)/\r\n    },\r\n    {\r\n      name: 'iOS',\r\n      pattern: /(iPhone|iPad|iPod)/\r\n    },\r\n    {\r\n      name: 'Mac OS X',\r\n      pattern: /Mac OS X/\r\n    },\r\n    {\r\n      name: 'Mac OS',\r\n      pattern: /(MacPPC|MacIntel|Mac_PowerPC|Macintosh)/\r\n    },\r\n    {\r\n      name: 'QNX',\r\n      pattern: /QNX/\r\n    },\r\n    {\r\n      name: 'UNIX',\r\n      pattern: /UNIX/\r\n    },\r\n    {\r\n      name: 'BeOS',\r\n      pattern: /BeOS/\r\n    },\r\n    {\r\n      name: 'OS/2',\r\n      pattern: /OS\\/2/\r\n    },\r\n    {\r\n      name: 'Search Bot',\r\n      pattern:\r\n        /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask Jeeves\\/Teoma|ia_archiver)/\r\n    }\r\n  ]\r\n  const ua = navigator.userAgent\r\n  let name = 'unknown'\r\n  let version = '--'\r\n  let match\r\n\r\n  match = PLATFORMS.find((platform) => platform.pattern.test(ua))\r\n\r\n  if (match) {\r\n    name = match.name\r\n  }\r\n\r\n  if (/Windows/.test(name)) {\r\n    version = /Windows (.*)/.exec(name)[1]\r\n    name = 'Windows'\r\n  }\r\n\r\n  switch (name) {\r\n    case 'Mac OS X':\r\n      version = /Mac OS X (1\\d[._\\d]+)/.exec(ua)[1]\r\n      break\r\n\r\n    case 'Android':\r\n      version = /Android ([._\\d]+)/.exec(ua)[1]\r\n      break\r\n\r\n    case 'iOS':\r\n      version = /OS (\\d+)_(\\d+)_?(\\d+)?/.exec(navigator.appVersion)\r\n      version = version[1] + '.' + version[2] + '.' + (version[3] | 0)\r\n      break\r\n  }\r\n\r\n  return {\r\n    name,\r\n    version\r\n  }\r\n}\r\n\r\nexport default os\r\n","import isElement from './isElement'\n\n/**\n * 获取 DOM 节点相对于窗口的 left（横坐标）值\n * ========================================================================\n * @method getOffsetLeft\n * @param {HTMLElement} el - DOM 节点\n * @returns {Number}\n */\nconst getOffsetLeft = (el) => {\n  let left = 0\n\n  if (!isElement(el)) {\n    return left\n  }\n\n  left = el.offsetLeft\n\n  /* istanbul ignore else */\n  if (el.offsetParent !== null) {\n    left += getOffsetLeft(el.offsetParent)\n  }\n\n  return left\n}\n\nexport default getOffsetLeft\n","import isElement from './isElement'\n\n/**\n * 获取 DOM 节点相对于窗口的 top （纵坐标）值\n * ========================================================================\n * @method getOffsetTop\n * @param {HTMLElement} el - DOM 节点\n * @returns {Number}\n */\nconst getOffsetTop = (el) => {\n  let top = 0\n\n  if (!isElement(el)) {\n    return top\n  }\n\n  top = el.offsetTop\n\n  /* istanbul ignore else */\n  if (el.offsetParent !== null) {\n    top += getOffsetTop(el.offsetParent)\n  }\n\n  return top\n}\n\nexport default getOffsetTop\n","import isElement from './isElement'\nimport getOffsetLeft from './getOffsetLeft'\nimport getOffsetTop from './getOffsetTop'\n\n/**\n * 获取 DOM 节点相对于窗口的 left 和 top 值\n * ========================================================================\n * @method getOffset\n * @param {HTMLElement} el - DOM 节点\n * @returns {Object|null}\n */\nconst getOffset = (el) => {\n  let top\n  let left\n  let width\n  let height\n\n  if (!isElement(el)) {\n    return null\n  }\n\n  top = getOffsetTop(el)\n  left = getOffsetLeft(el)\n  width = el.offsetWidth\n  height = el.offsetHeight\n\n  return {\n    width,\n    height,\n    top,\n    left\n  }\n}\n\nexport default getOffset\n","/**\r\n * 获取当前文档（窗口）滚动条的横向滚动的距离\r\n * ========================================================================\r\n * @method getDocumentScrollLeft\r\n * @param {Document} [doc]\r\n * @return {Number}\r\n */\r\nconst getDocumentScrollLeft = (doc = document) => {\r\n  const $document = doc\r\n  return Math.max(\r\n    $document.documentElement.scrollLeft,\r\n    $document.body.scrollLeft\r\n  )\r\n}\r\n\r\nexport default getDocumentScrollLeft\r\n","import isElement from './isElement'\r\nimport getDocumentScrollLeft from './getDocumentScrollLeft'\r\nimport canPosition from './canPosition'\r\n\r\n/**\r\n * 基于页面坐标获取元素的当前 X 位置。\r\n * ========================================================================\r\n * @method getPageX\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Node/ownerDocument\r\n * @param {HTMLElement} el\r\n * @return {Number|Boolean}\r\n */\r\nconst getPageX = (el) => {\r\n  const floor = Math.floor\r\n  let scrollLeft\r\n  let box\r\n  let doc\r\n  let pageX\r\n\r\n  /* istanbul ignore else */\r\n  if (!isElement(el) || !canPosition(el)) {\r\n    return false\r\n  }\r\n\r\n  box = el.getBoundingClientRect()\r\n  doc = el.ownerDocument\r\n  scrollLeft = getDocumentScrollLeft(doc)\r\n\r\n  pageX = floor(box.left)\r\n\r\n  if (scrollLeft) {\r\n    pageX += scrollLeft\r\n  }\r\n\r\n  return pageX\r\n}\r\n\r\nexport default getPageX\r\n","/**\r\n * 获取当前文档（窗口）滚动条的纵向滚动的距离\r\n * ========================================================================\r\n * @method getDocumentScrollTop\r\n * @param {Document} [doc]\r\n * @return {Number}\r\n */\r\nconst getDocumentScrollTop = (doc = document) => {\r\n  const $document = doc\r\n  return Math.max($document.documentElement.scrollTop, $document.body.scrollTop)\r\n}\r\n\r\nexport default getDocumentScrollTop\r\n","import isElement from './isElement'\r\nimport getDocumentScrollTop from './getDocumentScrollTop'\r\nimport canPosition from './canPosition'\r\n\r\n/**\r\n * 基于页面坐标获取元素的当前 Y 位置。\r\n * ========================================================================\r\n * @method getPageY\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Node/ownerDocument\r\n * @param {HTMLElement} el\r\n * @return {Number|Boolean}\r\n */\r\nconst getPageY = (el) => {\r\n  const floor = Math.floor\r\n  let scrollTop\r\n  let box\r\n  let doc\r\n  let pageY\r\n\r\n  if (!isElement(el) || !canPosition(el)) {\r\n    return false\r\n  }\r\n\r\n  box = el.getBoundingClientRect()\r\n  doc = el.ownerDocument\r\n  scrollTop = getDocumentScrollTop(doc)\r\n\r\n  pageY = floor(box.left)\r\n\r\n  if (scrollTop) {\r\n    pageY += scrollTop\r\n  }\r\n\r\n  return pageY\r\n}\r\n\r\nexport default getPageY\r\n","import isElement from './isElement'\r\nimport getPageX from './getPageX'\r\nimport getPageY from './getPageY'\r\nimport canPosition from './canPosition'\r\n\r\n/**\r\n * 基于页面坐标获取元素的当前( X 和 Y )位置。\r\n * ========================================================================\r\n * @method getPageXY\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Node/ownerDocument\r\n * @param {HTMLElement} el\r\n * @return {Object|Boolean}\r\n */\r\nconst getPageXY = (el) => {\r\n  if (!isElement(el) || !canPosition(el)) {\r\n    return false\r\n  }\r\n\r\n  return {\r\n    x: getPageY(el),\r\n    y: getPageX(el)\r\n  }\r\n}\r\n\r\nexport default getPageXY\r\n","import getDocumentScrollLeft from './getDocumentScrollLeft'\r\n\r\n/**\r\n * 获取 DOM 元素的滚动条横向滚动距离\r\n * ========================================================================\r\n * @method getScrollLeft\r\n * @param {HTMLElement|Object|Window} [el]\r\n * @return {Number}\r\n */\r\nconst getScrollLeft = (el = window) => {\r\n  if (el === document) {\r\n    return getDocumentScrollLeft()\r\n  }\r\n\r\n  return el.scrollX !== undefined ? el.scrollX : el.scrollLeft\r\n}\r\n\r\nexport default getScrollLeft\r\n","import getDocumentScrollTop from './getDocumentScrollTop'\r\n\r\n/**\r\n * 获取 DOM 元素的滚动条纵向滚动距离\r\n * ========================================================================\r\n * @method getScrollTop\r\n * @param {HTMLElement|Object|Window} [el]\r\n * @return {Number}\r\n */\r\nconst getScrollTop = (el = window) => {\r\n  if (el === document) {\r\n    return getDocumentScrollTop()\r\n  }\r\n\r\n  return el.scrollY !== undefined ? el.scrollY : el.scrollTop\r\n}\r\n\r\nexport default getScrollTop\r\n","import isElement from './isElement'\r\nimport getScrollLeft from './getScrollLeft'\r\nimport getStyle from './getStyle'\r\n\r\n/**\r\n * 获取 DOM 节点预期所有父节点的横向滚动距离\r\n * ========================================================================\r\n * @method getScrollTotalLeft\r\n * @return {Number}\r\n */\r\nconst getScrollTotalLeft = (() => {\r\n  const $root = window\r\n  let scrollX = []\r\n\r\n  return (el) => {\r\n    let $parent\r\n\r\n    if (!isElement(el)) {\r\n      return scrollX\r\n    }\r\n\r\n    $parent = el.parentNode\r\n\r\n    if (!$parent) {\r\n      return scrollX\r\n    }\r\n\r\n    if ($parent === $root.document) {\r\n      const $body = document.body || document.documentElement\r\n      const position = getScrollLeft($body)\r\n      const x = [...scrollX]\r\n\r\n      x.push(position.x)\r\n\r\n      scrollX = []\r\n\r\n      return x\r\n    }\r\n\r\n    if (\r\n      ['scroll', 'auto'].indexOf(getStyle($parent, 'overflow')) !== -1 ||\r\n      ['scroll', 'auto'].indexOf(getStyle($parent, 'overflow-x')) !== -1\r\n    ) {\r\n      const position = getScrollLeft($parent)\r\n\r\n      scrollX.push(position.x)\r\n    }\r\n\r\n    return getScrollTotalLeft($parent)\r\n  }\r\n})()\r\n\r\nexport default getScrollTotalLeft\r\n","import isElement from './isElement'\r\nimport getScrollTop from './getScrollTop'\r\nimport getStyle from './getStyle'\r\n\r\n/**\r\n * 获取 DOM 节点预期所有父节点的纵向滚动距离\r\n * ========================================================================\r\n * @method getScrollTotalTop\r\n * @return {Number}\r\n */\r\nconst getScrollTotalTop = (() => {\r\n  const $root = window\r\n  let scrollY = []\r\n\r\n  return (el) => {\r\n    let $parent\r\n\r\n    if (!isElement(el)) {\r\n      return scrollY\r\n    }\r\n\r\n    $parent = el.parentNode\r\n\r\n    if (!$parent) {\r\n      return scrollY\r\n    }\r\n\r\n    if ($parent === $root.document) {\r\n      const $body = document.body || document.documentElement\r\n      const position = getScrollTop($body)\r\n      const y = [...scrollY]\r\n\r\n      y.push(position.y)\r\n\r\n      scrollY = []\r\n\r\n      return y\r\n    }\r\n\r\n    if (\r\n      ['scroll', 'auto'].indexOf(getStyle($parent, 'overflow')) !== -1 ||\r\n      ['scroll', 'auto'].indexOf(getStyle($parent, 'overflow-y')) !== -1\r\n    ) {\r\n      const position = getScrollTop($parent)\r\n\r\n      scrollY.push(position.y)\r\n    }\r\n\r\n    return getScrollTotalTop($parent)\r\n  }\r\n})()\r\n\r\nexport default getScrollTotalTop\r\n","import isElement from './isElement'\r\nimport getOffset from './getOffset'\r\n\r\n/**\r\n * 获取 DOM 节点相对于窗口的 left 和 top 值\r\n * ========================================================================\r\n * @method offset\r\n * @alias getOffset\r\n * @param el\r\n * @return {Object}\r\n */\r\nconst offset = (el) => {\r\n  if (!isElement(el)) {\r\n    return null\r\n  }\r\n\r\n  return getOffset(el)\r\n}\r\n\r\nexport default offset\r\n","/**\n * 返回给定值的平方值\n * ========================================================================\n * @method easeInQuad\n * @param {Number} x\n * @returns {number}\n */\nconst easeInQuad = (x) => {\n  return x * x\n}\n\nexport default easeInQuad\n","import getOffset from '../getOffset'\r\nimport getOffsetLeft from '../getOffsetLeft'\r\nimport getOffsetTop from '../getOffsetTop'\r\nimport getPageXY from '../getPageXY'\r\nimport getPageX from '../getPageX'\r\nimport getPageY from '../getPageY'\r\nimport getDocumentScrollLeft from '../getDocumentScrollLeft'\r\nimport getDocumentScrollTop from '../getDocumentScrollTop'\r\nimport getScroll from '../getScroll'\r\nimport getScrollLeft from '../getScrollLeft'\r\nimport getScrollTop from '../getScrollTop'\r\nimport getScrollTotal from '../getScrollTotal'\r\nimport getScrollTotalLeft from '../getScrollTotalLeft'\r\nimport getScrollTotalTop from '../getScrollTotalTop'\r\nimport offset from '../offset'\r\nimport positions from '../positions'\r\nimport scrollTo from '../scrollTo'\r\n\r\nconst DOM = {\r\n  getOffset,\r\n  getOffsetLeft,\r\n  getOffsetTop,\r\n  getPageXY,\r\n  getPageX,\r\n  getPageY,\r\n  getDocumentScrollLeft,\r\n  getDocumentScrollTop,\r\n  getScroll,\r\n  getScrollLeft,\r\n  getScrollTop,\r\n  getScrollTotal,\r\n  getScrollTotalLeft,\r\n  getScrollTotalTop,\r\n  offset,\r\n  positions,\r\n  scrollTo\r\n}\r\n\r\nexport default DOM\r\n","import getScrollLeft from './getScrollLeft'\r\nimport getScrollTop from './getScrollTop'\r\n\r\n/**\r\n * 获取 DOM 元素的滚动条横向和纵向滚动距离\r\n * ========================================================================\r\n * @method getScrollLeft\r\n * @param {HTMLElement|Object|Window} [el]\r\n * @return {Object}\r\n */\r\nconst getScroll = (el = window) => {\r\n  return {\r\n    top: getScrollTop(el),\r\n    left: getScrollLeft(el)\r\n  }\r\n}\r\n\r\nexport default getScroll\r\n","import getScrollTotalLeft from './getScrollTotalLeft'\r\nimport getScrollTotalTop from './getScrollTotalTop'\r\n\r\n/**\r\n * 获取 DOM 元素的滚动条横向与纵向滚动距离。\r\n * ========================================================================\r\n * @method getScrollTotal\r\n * @param {HTMLElement|Window} [el]\r\n * @return {Object}\r\n */\r\nconst getScrollTotal = (el = window) => {\r\n  return {\r\n    top: getScrollTotalTop(el),\r\n    left: getScrollTotalLeft(el)\r\n  }\r\n}\r\n\r\nexport default getScrollTotal\r\n","import isElement from './isElement'\r\nimport getPageXY from './getPageXY'\r\nimport getOffset from './getOffset'\r\nimport canPosition from './canPosition'\r\n\r\n/**\r\n * 获取 DOM 元素的定位信息\r\n * ========================================================================\r\n * @method positions\r\n * @param {HTMLElement} el\r\n * @return {Object|Boolean}\r\n */\r\nconst positions = (el) => {\r\n  let offset\r\n\r\n  if (!isElement(el) || !canPosition(el)) {\r\n    return false\r\n  }\r\n\r\n  offset = getOffset(el)\r\n\r\n  return {\r\n    top: offset.top,\r\n    left: offset.left,\r\n    ...getPageXY(el)\r\n  }\r\n}\r\n\r\nexport default positions\r\n","import easeInQuad from './utils/lang/easeInQuad'\nimport isFunction from './utils/types/isFunction'\nimport isElement from './isElement'\nimport getEl from './getEl'\n\n/**\n * 使 DOM 节点滚动到指定位置\n * ========================================================================\n * @method scrollTo\n * @param {HTMLElement|String} el - （必须）要滚动的 DOM 节点\n * @param {Number} position - （必须）滚动的 scrollTop 数值\n * @param {String|Function} [direction] - （可选）滚动方向，默认值：'top'\n * @param {Function} [afterStop] - （可选）滚动完成的回调函数\n */\nconst scrollTo = (el, position, direction = 'vertical', afterStop = null) => {\n  const $el = isElement(el) ? el : getEl(el)\n  let scrollValue = direction === 'vertical' ? $el.scrollTop : $el.scrollLeft\n  let step = 0\n  const distance = position - scrollValue\n  const MAX_VALUE =\n    direction === 'vertical' ? $el.scrollHeight : $el.scrollWidth\n  const MAX_POSITION = position - MAX_VALUE <= 0 ? position : MAX_VALUE\n  const stop = (pos) => {\n    if (isFunction(direction)) {\n      direction(pos)\n    } else if (isFunction(afterStop)) {\n      afterStop(pos)\n    }\n\n    return false\n  }\n  const play = () => {\n    step += 1\n\n    if (distance < 0) {\n      scrollValue -= easeInQuad(step)\n      $el.scrollTop = scrollValue\n\n      if (scrollValue <= position) {\n        $el.scrollTop = position\n        return stop(position)\n      }\n    } else {\n      scrollValue += easeInQuad(step)\n      $el.scrollTop = scrollValue\n\n      if (scrollValue >= MAX_POSITION) {\n        $el.scrollTop = MAX_POSITION\n        return stop(MAX_POSITION)\n      }\n    }\n\n    requestAnimationFrame(play)\n  }\n\n  requestAnimationFrame(play)\n}\n\nexport default scrollTo\n","import isElement from './isElement'\r\nimport isMatched from './isMatched'\r\nimport getNextSibling from './getNextSibling'\r\n\r\n/**\r\n * 通过过滤器获取 DOM 元素匹配的后面的邻居元素节点\r\n * ========================================================================\r\n * @method getNextSiblingBy\r\n * @param {HTMLElement} el\r\n * @param {Function|String} filter\r\n * @return {HTMLElement|null}\r\n */\r\nconst getNextSiblingBy = (el, filter) => {\r\n  let $el = isElement(el) ? el : null\r\n\r\n  while ($el) {\r\n    $el = getNextSibling($el)\r\n\r\n    if (isMatched($el, filter)) {\r\n      return $el\r\n    }\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport default getNextSiblingBy\r\n","import isElement from './isElement'\r\nimport isMatched from './isMatched'\r\nimport getPreviousSibling from './getPreviousSibling'\r\n\r\n/**\r\n * 通过过滤器获取 DOM 元素匹配的前面的邻居元素节点\r\n * ========================================================================\r\n * @method getPreviousSiblingBy\r\n * @param {HTMLElement} el\r\n * @param {Function|String} filter\r\n * @return {HTMLElement|null}\r\n */\r\nconst getPreviousSiblingBy = (el, filter) => {\r\n  let $el = isElement(el) ? el : null\r\n\r\n  while ($el) {\r\n    $el = getPreviousSibling($el)\r\n\r\n    if (isMatched($el, filter)) {\r\n      return $el\r\n    }\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport default getPreviousSiblingBy\r\n","import getNextSibling from '../getNextSibling'\r\nimport getPreviousSibling from '../getPreviousSibling'\r\nimport getNextSiblingBy from '../getNextSiblingBy'\r\nimport getPreviousSiblingBy from '../getPreviousSiblingBy'\r\nimport getNextSiblings from '../getNextSiblings'\r\nimport getPreviousSiblings from '../getPreviousSiblings'\r\nimport getSiblings from '../getSiblings'\r\nimport next from '../next'\r\nimport prev from '../prev'\r\nimport nextBy from '../nextBy'\r\nimport prevBy from '../prevBy'\r\nimport nextAll from '../nextAll'\r\nimport prevAll from '../prevAll'\r\nimport siblings from '../siblings'\r\n\r\nconst DOM = {\r\n  getNextSibling,\r\n  getPreviousSibling,\r\n  getNextSiblingBy,\r\n  getPreviousSiblingBy,\r\n  getNextSiblings,\r\n  getPreviousSiblings,\r\n  getSiblings,\r\n  next,\r\n  prev,\r\n  nextBy,\r\n  prevBy,\r\n  nextAll,\r\n  prevAll,\r\n  siblings\r\n}\r\n\r\nexport default DOM\r\n","import getNextSibling from './getNextSibling'\r\n\r\n/**\r\n * 获取 DOM 元素的后一个邻居元素节点\r\n * ========================================================================\r\n * @method next\r\n * @alias getNextSibling\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/nextElementSibling\r\n * @param {HTMLElement} el\r\n * @return {Element|null}\r\n */\r\nconst next = (el) => {\r\n  return getNextSibling(el)\r\n}\r\n\r\nexport default next\r\n","import getPreviousSibling from './getPreviousSibling'\r\n\r\n/**\r\n * 获取 DOM 元素的前一个邻居元素节点\r\n * ========================================================================\r\n * @method prev\r\n * @alias getPreviousSibling\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/previousElementSibling\r\n * @param {HTMLElement} el\r\n * @return {Element|null}\r\n */\r\nconst prev = (el) => {\r\n  return getPreviousSibling(el)\r\n}\r\n\r\nexport default prev\r\n","import getNextSiblingBy from './getNextSiblingBy'\r\n\r\n/**\r\n * 通过过滤器获取 DOM 元素匹配的后面的邻居元素节点\r\n * ========================================================================\r\n * @method nextBy\r\n * @alias getNextSiblingBy\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/nextElementSibling\r\n * @param {HTMLElement} el\r\n * @param {Function|String} filter\r\n * @return {HTMLElement|null}\r\n */\r\nconst nextBy = (el, filter) => {\r\n  return getNextSiblingBy(el, filter)\r\n}\r\n\r\nexport default nextBy\r\n","import getPreviousSiblingBy from './getPreviousSiblingBy'\r\n\r\n/**\r\n * 通过过滤器获取 DOM 元素匹配的前面的邻居元素节点\r\n * ========================================================================\r\n * @method prevBy\r\n * @alias getPreviousSiblingBy\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/previousElementSibling\r\n * @param {HTMLElement} el\r\n * @param {Function|String} filter\r\n * @return {Element|null}\r\n */\r\nconst prevBy = (el, filter) => {\r\n  return getPreviousSiblingBy(el, filter)\r\n}\r\n\r\nexport default prevBy\r\n","import getNextSiblings from './getNextSiblings'\r\n\r\n/**\r\n * 获取 DOM 元素的后面所有邻居元素节点。\r\n * ========================================================================\r\n * @method nextAll\r\n * @alias getNextSiblings\r\n * @param {HTMLElement} el\r\n * @return {Array}\r\n */\r\nconst nextAll = (el) => {\r\n  return getNextSiblings(el)\r\n}\r\n\r\nexport default nextAll\r\n","import getPreviousSiblings from './getPreviousSiblings'\r\n\r\n/**\r\n * 获取 DOM 元素的前面所有邻居元素节点。\r\n * ========================================================================\r\n * @method prevAll\r\n * @alias getPreviousSiblings\r\n * @param {HTMLElement} el\r\n * @return {Array}\r\n */\r\nconst prevAll = (el) => {\r\n  return getPreviousSiblings(el)\r\n}\r\n\r\nexport default prevAll\r\n","import isElement from './utils/types/isElement'\r\nimport pixel from './pixel'\r\nimport getStyle from './getStyle'\r\nimport offset from './offset'\r\n\r\n/**\r\n * 获取 DOM 节点的相关尺寸信息，返回相关尺寸数据的对象。\r\n * ========================================================================\r\n * @method _getElementSizes\r\n * @param {HTMLElement} el\r\n * @return {Object|null}\r\n * @private\r\n */\r\nconst _getElementSizes = (el) => {\r\n  let marginTop\r\n  let marginBottom\r\n  let marginLeft\r\n  let marginRight\r\n\r\n  let borderTop\r\n  let borderBottom\r\n  let borderLeft\r\n  let borderRight\r\n\r\n  let paddingTop\r\n  let paddingBottom\r\n  let paddingLeft\r\n  let paddingRight\r\n\r\n  let offsetSize\r\n  let offsetHeight\r\n  let offsetWidth\r\n\r\n  let rect\r\n\r\n  if (!isElement(el)) {\r\n    return null\r\n  }\r\n\r\n  marginTop = pixel(getStyle(el, 'margin-top'))\r\n  marginBottom = pixel(getStyle(el, 'margin-bottom'))\r\n  marginLeft = pixel(getStyle(el, 'margin-left'))\r\n  marginRight = pixel(getStyle(el, 'margin-right'))\r\n\r\n  borderTop = pixel(getStyle(el, 'border-top-width'))\r\n  borderBottom = pixel(getStyle(el, 'border-bottom-width'))\r\n  borderLeft = pixel(getStyle(el, 'border-left-width'))\r\n  borderRight = pixel(getStyle(el, 'border-right-width'))\r\n\r\n  paddingTop = pixel(getStyle(el, 'padding-top'))\r\n  paddingBottom = pixel(getStyle(el, 'padding-bottom'))\r\n  paddingLeft = pixel(getStyle(el, 'padding-left'))\r\n  paddingRight = pixel(getStyle(el, 'padding-right'))\r\n\r\n  offsetSize = offset(el)\r\n  offsetHeight = offsetSize.height\r\n  offsetWidth = offsetSize.width\r\n\r\n  rect = el.getBoundingClientRect()\r\n\r\n  return {\r\n    marginTop,\r\n    marginBottom,\r\n    marginLeft,\r\n    marginRight,\r\n    borderTop,\r\n    borderBottom,\r\n    borderLeft,\r\n    borderRight,\r\n    paddingTop,\r\n    paddingBottom,\r\n    paddingLeft,\r\n    paddingRight,\r\n    offsetHeight,\r\n    offsetWidth,\r\n    rect\r\n  }\r\n}\r\n\r\nexport default _getElementSizes\r\n","import isUndefined from './utils/types/isUndefined'\r\nimport isFunction from './utils/types/isFunction'\r\nimport pixel from './pixel'\r\nimport isElement from './isElement'\r\nimport _getElementSizes from './_getElementSizes'\r\nimport setStyle from './setStyle'\r\n\r\n/**\r\n * 获取或设置 DOM 元素的 innerHeight 值；\r\n * innerHeight = style.height + padding 高度（paddingTop + paddingBottom）\r\n * ========================================================================\r\n * @method innerHeight\r\n * @param {HTMLElement} el\r\n * @param {Number|Function} [val]\r\n * @return {Number|*}\r\n */\r\nconst innerHeight = (el, val) => {\r\n  let height\r\n\r\n  if (!isElement(el)) {\r\n    return false\r\n  }\r\n\r\n  const { borderTop, borderBottom, paddingTop, paddingBottom, offsetHeight } =\r\n    _getElementSizes(el)\r\n\r\n  if (isFunction(val)) {\r\n    return val(el, {\r\n      borderTop,\r\n      borderBottom,\r\n      paddingTop,\r\n      paddingBottom,\r\n      offsetHeight\r\n    })\r\n  }\r\n\r\n  if (!isUndefined(val)) {\r\n    height = offsetHeight - (borderTop + borderBottom)\r\n\r\n    /* istanbul ignore else */\r\n    if (height !== val) {\r\n      setStyle(el, 'height', pixel(val - (paddingTop + paddingBottom)))\r\n    }\r\n  } else {\r\n    return offsetHeight - (borderTop + borderBottom)\r\n  }\r\n}\r\n\r\nexport default innerHeight\r\n","import isUndefined from './utils/types/isUndefined'\r\nimport isFunction from './utils/types/isFunction'\r\nimport pixel from './pixel'\r\nimport isElement from './isElement'\r\nimport _getElementSizes from './_getElementSizes'\r\nimport setStyle from './setStyle'\r\n\r\n/**\r\n * 获取或设置 DOM 元素的 innerWidth 值；\r\n * innerWidth = style.height + padding 宽度（paddingRight + paddingLeft）\r\n * ========================================================================\r\n * @method innerHeight\r\n * @param {HTMLElement} el\r\n * @param {Number|Function} [val]\r\n * @return {Number|*}\r\n */\r\nconst innerWidth = (el, val) => {\r\n  let width\r\n\r\n  if (!isElement(el)) {\r\n    return false\r\n  }\r\n\r\n  const { borderLeft, borderRight, paddingLeft, paddingRight, offsetWidth } =\r\n    _getElementSizes(el)\r\n\r\n  if (isFunction(val)) {\r\n    return val(el, {\r\n      borderLeft,\r\n      borderRight,\r\n      paddingLeft,\r\n      paddingRight,\r\n      offsetWidth\r\n    })\r\n  }\r\n\r\n  if (!isUndefined(val)) {\r\n    width = offsetWidth - (borderLeft + borderRight)\r\n\r\n    /* istanbul ignore else */\r\n    if (width !== val) {\r\n      setStyle(el, 'width', pixel(val - (paddingLeft + paddingRight)))\r\n    }\r\n  } else {\r\n    return offsetWidth - (borderLeft + borderRight)\r\n  }\r\n}\r\n\r\nexport default innerWidth\r\n","import isUndefined from './utils/types/isUndefined'\r\nimport isFunction from './utils/types/isFunction'\r\nimport isBoolean from './utils/types/isBoolean'\r\nimport pixel from './pixel'\r\nimport isElement from './isElement'\r\nimport _getElementSizes from './_getElementSizes'\r\nimport setStyle from './setStyle'\r\n\r\n/**\r\n * 获取 DOM 元素的 outerHeight 值\r\n * ========================================================================\r\n * @method outerHeight\r\n * @param {HTMLElement} el\r\n * @param {Number|String|Function|Boolean} [val]\r\n * @param {Boolean} [includeMargin]\r\n * @return {Number|*}\r\n */\r\nconst outerHeight = (el, val, includeMargin = false) => {\r\n  let height\r\n\r\n  if (!isElement(el)) {\r\n    return false\r\n  }\r\n\r\n  const {\r\n    marginTop,\r\n    marginBottom,\r\n    borderTop,\r\n    borderBottom,\r\n    paddingTop,\r\n    paddingBottom,\r\n    offsetHeight\r\n  } = _getElementSizes(el)\r\n\r\n  // val 为 Function 类型，用来获取自定义的 outerHeight\r\n  if (isFunction(val)) {\r\n    return val(el, {\r\n      marginTop,\r\n      marginBottom,\r\n      borderTop,\r\n      borderBottom,\r\n      paddingTop,\r\n      paddingBottom,\r\n      offsetHeight\r\n    })\r\n  }\r\n\r\n  // 有设置 val 参数\r\n  if (!isUndefined(val)) {\r\n    height = offsetHeight\r\n\r\n    // 获取 outerHeight，包含边距\r\n    if (isBoolean(val)) {\r\n      includeMargin = val\r\n\r\n      /* istanbul ignore else */\r\n      if (includeMargin) {\r\n        height += marginTop + marginBottom\r\n      }\r\n\r\n      return height\r\n    }\r\n\r\n    /* istanbul ignore else */\r\n    if (height !== val) {\r\n      height = val - (borderTop + borderBottom + paddingTop + paddingBottom)\r\n\r\n      // 设置 outerHeight，包含边距\r\n      /* istanbul ignore else */\r\n      if (includeMargin) {\r\n        height -= marginTop + marginBottom\r\n      }\r\n\r\n      setStyle(el, 'height', pixel(height))\r\n    }\r\n  } else {\r\n    return offsetHeight\r\n  }\r\n}\r\n\r\nexport default outerHeight\r\n","import isUndefined from './utils/types/isUndefined'\r\nimport isFunction from './utils/types/isFunction'\r\nimport isBoolean from './utils/types/isBoolean'\r\nimport pixel from './pixel'\r\nimport isElement from './isElement'\r\nimport _getElementSizes from './_getElementSizes'\r\nimport setStyle from './setStyle'\r\n\r\n/**\r\n * 获取 DOM 元素的 outerWidth 值\r\n * ========================================================================\r\n * @method outerWidth\r\n * @param {HTMLElement} el\r\n * @param {Number|String|Function|Boolean} [val]\r\n * @param {Boolean} [includeMargin]\r\n * @return {Number|*}\r\n */\r\nconst outerWidth = (el, val, includeMargin = false) => {\r\n  let width\r\n\r\n  if (!isElement(el)) {\r\n    return false\r\n  }\r\n\r\n  const {\r\n    marginLeft,\r\n    marginRight,\r\n    borderLeft,\r\n    borderRight,\r\n    paddingLeft,\r\n    paddingRight,\r\n    offsetWidth\r\n  } = _getElementSizes(el)\r\n\r\n  // val 为 Function 类型，用来获取自定义的 outerWidth\r\n  if (isFunction(val)) {\r\n    return val(el, {\r\n      marginLeft,\r\n      marginRight,\r\n      borderLeft,\r\n      borderRight,\r\n      paddingLeft,\r\n      paddingRight,\r\n      offsetWidth\r\n    })\r\n  }\r\n\r\n  // 设置了 val 参数\r\n  if (!isUndefined(val)) {\r\n    width = offsetWidth\r\n\r\n    // 获取 outerWidth，包含边距\r\n    if (isBoolean(val)) {\r\n      includeMargin = val\r\n\r\n      /* istanbul ignore else */\r\n      if (includeMargin) {\r\n        width += marginLeft + marginRight\r\n      }\r\n\r\n      return width\r\n    }\r\n\r\n    /* istanbul ignore else */\r\n    if (width !== val) {\r\n      width = val - (borderLeft + borderRight + paddingLeft + paddingRight)\r\n\r\n      /* istanbul ignore else */\r\n      if (includeMargin) {\r\n        width -= marginLeft + marginRight\r\n      }\r\n\r\n      setStyle(el, 'width', pixel(width))\r\n    }\r\n  } else {\r\n    return offsetWidth\r\n  }\r\n}\r\n\r\nexport default outerWidth\r\n","import getViewportHeight from '../getViewportHeight'\r\nimport getViewportWidth from '../getViewportWidth'\r\nimport getDocumentHeight from '../getDocumentHeight'\r\nimport getDocumentWidth from '../getDocumentWidth'\r\nimport getScreenHeight from '../getScreenHeight'\r\nimport getScreenWidth from '../getScreenWidth'\r\nimport getScrollbarWidth from '../getScrollbarWidth'\r\nimport innerHeight from '../innerHeight'\r\nimport innerWidth from '../innerWidth'\r\nimport outerHeight from '../outerHeight'\r\nimport outerWidth from '../outerWidth'\r\nimport height from '../height'\r\nimport width from '../width'\r\nimport sizes from '../sizes'\r\n\r\nconst DOM = {\r\n  getViewportHeight,\r\n  getViewportWidth,\r\n  getDocumentHeight,\r\n  getDocumentWidth,\r\n  getScreenHeight,\r\n  getScreenWidth,\r\n  getScrollbarWidth,\r\n  innerHeight,\r\n  innerWidth,\r\n  outerHeight,\r\n  outerWidth,\r\n  height,\r\n  width,\r\n  sizes\r\n}\r\n\r\nexport default DOM\r\n","import getViewportHeight from './getViewportHeight'\r\n\r\n/**\r\n * 获取当前页面（滚动条）的高度\r\n * ========================================================================\r\n * @method getDocumentHeight\r\n * @return {Number}\r\n */\r\nconst getDocumentHeight = () => {\r\n  const scrollHeight =\r\n    document.documentElement.scrollHeight || document.body.scrollHeight\r\n  return Math.max(scrollHeight, getViewportHeight())\r\n}\r\n\r\nexport default getDocumentHeight\r\n","import getViewportWidth from './getViewportWidth'\r\n\r\n/**\r\n * ========================================================================\r\n * @method getDocumentWidth\r\n * @return {Number}\r\n */\r\nconst getDocumentWidth = () => {\r\n  const scrollWidth =\r\n    document.documentElement.scrollWidth || document.body.scrollWidth\r\n  return Math.max(scrollWidth, getViewportWidth())\r\n}\r\n\r\nexport default getDocumentWidth\r\n","/**\r\n * 获取显示器屏幕分辨率高度\r\n * ========================================================================\r\n * @method getScreenHeight\r\n * @since 1.4.0\r\n * @return {number}\r\n */\r\nconst getScreenHeight = () => {\r\n  return window.screen.height\r\n}\r\n\r\nexport default getScreenHeight\r\n","/**\r\n * 获取显示器屏幕分辨率宽度\r\n * ========================================================================\r\n * @method getScreenWidth\r\n * @since 1.4.0\r\n * @return {number}\r\n */\r\nconst getScreenWidth = () => {\r\n  return window.screen.width\r\n}\r\n\r\nexport default getScreenWidth\r\n","import isElement from './isElement'\r\n\r\n/**\r\n * 获取浏览器或者 DOM 元素纵向滚动条的宽度\r\n * ========================================================================\r\n * @method getScrollbarWidth\r\n * @since 1.4.0\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Window/innerWidth\r\n * @return {number}\r\n */\r\nconst getScrollbarWidth = (el) => {\r\n  let innerWidth = 0\r\n  let clientWidth = 0\r\n\r\n  if (!el) {\r\n    innerWidth = window.innerWidth\r\n    clientWidth = document.documentElement.clientWidth\r\n  } else {\r\n    if (isElement(el)) {\r\n      innerWidth = el.offsetWidth\r\n      clientWidth = el.clientWidth\r\n    }\r\n  }\r\n\r\n  return innerWidth - clientWidth\r\n}\r\n\r\nexport default getScrollbarWidth\r\n","import isNumber from './utils/types/isNumber'\r\nimport isString from './utils/types/isString'\r\nimport isUndefined from './utils/types/isUndefined'\r\nimport isElement from './isElement'\r\nimport setStyle from './setStyle'\r\nimport offset from './offset'\r\n\r\n/**\r\n * 获取或设置 DOM 元素的高度。\r\n * ========================================================================\r\n * @method height\r\n * @param {HTMLElement} el\r\n * @param {String|Number} [val]\r\n * @return {Number|*}\r\n */\r\nconst height = (el, val) => {\r\n  let value\r\n\r\n  if (\r\n    !isElement(el) ||\r\n    (!isUndefined(val) && !isNumber(val) && !isString(val))\r\n  ) {\r\n    return false\r\n  }\r\n\r\n  if (isUndefined(val)) {\r\n    return offset(el).height\r\n  } else {\r\n    if (isNumber(val)) {\r\n      value = `${val}px`\r\n    } else {\r\n      value = `${val.replace(/\\D/gi, '')}px`\r\n    }\r\n\r\n    setStyle(el, 'height', value)\r\n  }\r\n}\r\n\r\nexport default height\r\n","import isNumber from './utils/types/isNumber'\r\nimport isString from './utils/types/isString'\r\nimport isUndefined from './utils/types/isUndefined'\r\nimport isElement from './isElement'\r\nimport setStyle from './setStyle'\r\nimport offset from './offset'\r\n\r\n/**\r\n * 获取或设置 DOM 元素的宽度。\r\n * ========================================================================\r\n * @method width\r\n * @param {HTMLElement} el\r\n * @param {Number|String} [val]\r\n * @return {Number|*}\r\n */\r\nconst width = (el, val) => {\r\n  let value\r\n\r\n  /* istanbul ignore else */\r\n  if (\r\n    !isElement(el) ||\r\n    (!isUndefined(val) && !isNumber(val) && !isString(val))\r\n  ) {\r\n    return false\r\n  }\r\n\r\n  if (isUndefined(val)) {\r\n    return offset(el).width\r\n  } else {\r\n    if (isNumber(val)) {\r\n      value = `${val}px`\r\n    } else {\r\n      value = `${val.replace(/\\D/gi, '')}px`\r\n    }\r\n\r\n    setStyle(el, 'width', value)\r\n  }\r\n}\r\n\r\nexport default width\r\n","import _getElementSizes from './_getElementSizes'\r\nimport innerHeight from './innerHeight'\r\nimport innerWidth from './innerWidth'\r\nimport outerHeight from './outerHeight'\r\nimport outerWidth from './outerWidth'\r\n\r\n/**\r\n * 获取 DOM 节点的相关尺寸信息，返回相关尺寸数据的对象。\r\n * ========================================================================\r\n * @method sizes\r\n * @param {HTMLElement} el\r\n * @return {Object|Boolean}\r\n */\r\nconst sizes = (el) => {\r\n  const elSizes = _getElementSizes(el)\r\n\r\n  if (!elSizes) {\r\n    return false\r\n  }\r\n\r\n  return {\r\n    offsetHeight: elSizes.offsetHeight,\r\n    offsetWidth: elSizes.offsetWidth,\r\n    innerHeight: innerHeight(el),\r\n    innerWidth: innerWidth(el),\r\n    outerHeight: outerHeight(el),\r\n    outerWidth: outerWidth(el),\r\n    margin: {\r\n      top: elSizes.marginTop,\r\n      right: elSizes.marginRight,\r\n      bottom: elSizes.marginBottom,\r\n      left: elSizes.marginLeft\r\n    },\r\n    border: {\r\n      top: elSizes.borderTop,\r\n      right: elSizes.borderRight,\r\n      bottom: elSizes.borderBottom,\r\n      left: elSizes.borderLeft\r\n    },\r\n    padding: {\r\n      top: elSizes.paddingTop,\r\n      right: elSizes.paddingRight,\r\n      bottom: elSizes.paddingBottom,\r\n      left: elSizes.paddingLeft\r\n    },\r\n    rect: elSizes.rect\r\n  }\r\n}\r\n\r\nexport default sizes\r\n","import toCamel from './utils/string/toCamel'\r\nimport isUndefined from './utils/types/isUndefined'\r\nimport isArray from './utils/types/isArray'\r\nimport isElement from './isElement'\r\n\r\n/**\r\n * 获取 DOM 元素 attrs 数组中指定的多个 CSS 样式值\r\n * ========================================================================\r\n * @param {HTMLElement} el\r\n * @param {Array} attrs\r\n * @returns {Object|null}\r\n */\r\nconst getStyles = (el, attrs = []) => {\r\n  const styles = {}\r\n  let props = null\r\n  let keys\r\n\r\n  if (\r\n    !isElement(el) ||\r\n    !isArray(attrs) ||\r\n    (isArray(attrs) && attrs.length < 1)\r\n  ) {\r\n    return props\r\n  }\r\n\r\n  props = getComputedStyle(el)\r\n  keys = Object.keys(props)\r\n\r\n  /* istanbul ignore else */\r\n  if (attrs.length > 0) {\r\n    keys = attrs\r\n  }\r\n\r\n  keys.forEach((attr) => {\r\n    const prop = toCamel(attr)\r\n    const isNumber = /\\d+/g\r\n    const value = props[prop]\r\n\r\n    /* istanbul ignore else */\r\n    if (!isUndefined(prop) && !isNumber.test(prop) && !isUndefined(value)) {\r\n      styles[prop] = props[prop]\r\n    }\r\n  })\r\n\r\n  return styles\r\n}\r\n\r\nexport default getStyles\r\n","import isString from './utils/types/isString'\r\nimport isObject from './utils/types/isObject'\r\nimport isElement from './isElement'\r\n\r\n/**\r\n * 给 DOM 元素批量添加 CSS 样式\r\n * ========================================================================\r\n * @methods setStyles\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/cssText\r\n * @param {HTMLElement} el\r\n * @param {Object|String} styles\r\n */\r\nconst setStyles = (el, styles) => {\r\n  let rules = ''\r\n\r\n  if (!isElement(el) || (!isObject(styles) && !isString(styles))) {\r\n    return false\r\n  }\r\n\r\n  if (isObject(styles)) {\r\n    Object.keys(styles).forEach((prop) => {\r\n      const val = styles[prop]\r\n      rules += `${prop}:${val};`\r\n    })\r\n  } else {\r\n    rules = styles\r\n  }\r\n\r\n  el.style.cssText += rules\r\n}\r\n\r\nexport default setStyles\r\n","/**\r\n * 获取 CSS 变量（属性）值。返回一个 DOMString ，其中包含请求的 CSS 属性的值。\r\n * ========================================================================\r\n * @method getPropperty\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/CSSStyleDeclaration/getPropertyValue\r\n * @param {String} prop\r\n * @return {String}\r\n */\r\nconst getProperty = (prop) => {\r\n  const documentElement = document.documentElement\r\n  return documentElement.style.getPropertyValue(prop)\r\n}\r\n\r\nexport default getProperty\r\n","import isString from './utils/types/isString'\r\n\r\n/**\r\n * 为一个声明了 CSS 样式的对象设置一个新的值。\r\n * ========================================================================\r\n * @method setProperty\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/CSSStyleDeclaration/setProperty\r\n * @param {String} prop\r\n * @param {String} value\r\n */\r\nconst setProperty = (prop, value) => {\r\n  const documentElement = document.documentElement\r\n\r\n  if (!isString(prop) || !isString(value)) {\r\n    return false\r\n  }\r\n\r\n  documentElement.style.setProperty(prop, value)\r\n}\r\n\r\nexport default setProperty\r\n","import getStyle from '../getStyle'\r\nimport setStyle from '../setStyle'\r\nimport getStyles from '../getStyles'\r\nimport setStyles from '../setStyles'\r\nimport getProperty from '../getProperty'\r\nimport setProperty from '../setProperty'\r\nimport injectCSS from '../injectCSS'\r\nimport css from '../css'\r\nimport prop from '../prop'\r\nimport show from '../show'\r\nimport hide from '../hide'\r\nimport toggle from '../toggle'\r\n\r\nconst DOM = {\r\n  getStyle,\r\n  setStyle,\r\n  getStyles,\r\n  setStyles,\r\n  getProperty,\r\n  setProperty,\r\n  injectCSS,\r\n  css,\r\n  prop,\r\n  show,\r\n  hide,\r\n  toggle\r\n}\r\n\r\nexport default DOM\r\n","import createElement from './createElement'\r\n\r\n/**\r\n * 向当前文档动态插入 style 标签，以批量添加样式。返回动态创建的 style 标签节点。\r\n * ========================================================================\r\n * @method injectCSS\r\n * @since 1.4.0\r\n * @param {String} cssRules\r\n * @return {HTMLElement}\r\n */\r\nconst injectCSS = (cssRules) => {\r\n  const $style = createElement('style', {\r\n    type: 'text/css',\r\n    innerText: cssRules\r\n  })\r\n\r\n  document.head.appendChild($style)\r\n\r\n  return $style\r\n}\r\n\r\nexport default injectCSS\r\n","import isString from './utils/types/isString'\r\nimport isObject from './utils/types/isObject'\r\nimport isUndefined from './utils/types/isUndefined'\r\nimport isArray from './utils/types/isArray'\r\nimport isElement from './isElement'\r\nimport setStyle from './setStyle'\r\nimport getStyle from './getStyle'\r\nimport setStyles from './setStyles'\r\nimport getStyles from './getStyles'\r\n\r\n/**\r\n * 用来设置或者查询 DOM 元素的 CSS 样式\r\n * ========================================================================\r\n * @method css\r\n * @param {HTMLElement} el\r\n * @param {String|Object|Array} attr\r\n * @param {String} [value]\r\n * @return {Object|String|*}\r\n */\r\nconst css = (el, attr, value) => {\r\n  if (\r\n    !isElement(el) ||\r\n    (!isString(attr) && !isObject(attr) && !isArray(attr))\r\n  ) {\r\n    return false\r\n  }\r\n\r\n  if (isString(attr)) {\r\n    if (!isUndefined(value)) {\r\n      setStyle(el, attr, value)\r\n    } else {\r\n      return getStyle(el, attr)\r\n    }\r\n  } else if (isArray(attr)) {\r\n    return getStyles(el, attr)\r\n  } else {\r\n    setStyles(el, attr)\r\n  }\r\n}\r\n\r\nexport default css\r\n","import isUndefined from './utils/types/isUndefined'\r\nimport getProperty from './getProperty'\r\nimport setProperty from './setProperty'\r\n\r\n/**\r\n * 设置或获取 CSS 样式变量\r\n * ========================================================================\r\n * @method prop\r\n * @param {String} prop\r\n * @param {String} [value]\r\n * @return {String|*}\r\n */\r\nconst prop = (prop, value) => {\r\n  if (!isUndefined(value)) {\r\n    setProperty(prop, value)\r\n  } else {\r\n    return getProperty(prop)\r\n  }\r\n}\r\n\r\nexport default prop\r\n","import isElement from './isElement'\r\nimport getStyle from './getStyle'\r\nimport show from './show'\r\nimport hide from './hide'\r\n\r\n/**\r\n * 隐藏或者显示指定 DOM 元素\r\n * ========================================================================\r\n * @method toggle\r\n * @param {HTMLElement} el\r\n */\r\nconst toggle = (el) => {\r\n  if (!isElement(el)) {\r\n    return false\r\n  }\r\n\r\n  if (getStyle(el, 'display') !== 'none') {\r\n    hide(el)\r\n  } else {\r\n    show(el)\r\n  }\r\n}\r\n\r\nexport default toggle\r\n","import Attributes from './attributes'\r\nimport Base from './base'\r\nimport Color from './color'\r\nimport Insertion from './insertion'\r\nimport Platform from './platform'\r\nimport Position from './position'\r\nimport Sibling from './sibling'\r\nimport Size from './size'\r\nimport Style from './style'\r\nimport Types from './types'\r\n\r\nconst DOM = {\r\n  ...Attributes,\r\n  ...Base,\r\n  ...Color,\r\n  ...Insertion,\r\n  ...Platform,\r\n  ...Position,\r\n  ...Sibling,\r\n  ...Size,\r\n  ...Style,\r\n  ...Types\r\n}\r\n\r\nexport default DOM\r\n","import isCollection from '../isCollection'\r\nimport isDOM from '../isDOM'\r\nimport isElement from '../isElement'\r\nimport isFragment from '../isFragment'\r\nimport isText from '../isText'\r\n\r\nconst DOM = {\r\n  isCollection,\r\n  isDOM,\r\n  isElement,\r\n  isFragment,\r\n  isText\r\n}\r\n\r\nexport default DOM\r\n"],"names":["toString","val","Object","prototype","apply","isFunction","isObject","o","isElement","nodeName","tagName","nodeType","isString","str","KEYWORDS","black","silver","gray","white","maroon","red","purple","fuchsia","green","lime","olive","yellow","navy","blue","teal","aqua","COLOR_PROPS","FROM_ELEMENT_TAGS","DISABLE_TAGS","READONLY_INPUT_TYPES","REG_RGB","REG_HEX","REG_HEX3","REG_HSL","getAttribute","el","attr","toLowerCase","style","cssText","indexOf","value","setAttribute","className","innerText","innerHTML","removeAttribute","isArray","Array","getAttributes","props","attrs","keys","length","getAttributeNames","forEach","key","hasOwn","obj","prop","hasOwnProperty","call","setAttributes","getValue","setValue","hasClass","pattern","allClass","classList","RegExp","contains","exec","addClass","add","trim","replace","removeClass","remove","isUndefined","toCamel","x","l","toUpperCase","getStyle","getComputedStyle","TAGS","isHTML","html","basic","full","slice","map","tag","join","test","stripScripts","isHTMLCollection","isFragment","fragment","isTextNode","isDOM","text","document","createTextNode","textContent","createElement","children","$fragment","createDocumentFragment","$el","isValidChild","child","append","$child","appendChild","every","strHTML","template","childNodes","DOM","removeAttributes","replaceClass","oldCls","newCls","toggleClass","toggle","enable","disable","readonly","type","build","firstElementChild","clone","deep","cloneNode","_isAncestor","ancestor","descendent","result","compareDocumentPosition","inDocument","doc","$doc","ownerDocument","documentElement","canPosition","matches","selector","sel","msMatchesSelector","getHostOrParent","host","parentNode","isBoolean","getEl","multiple","isMultiple","querySelectorAll","querySelector","isCollection","filter","collection","callback","items","item","i","getOffsetParent","offsetParent","getScrollParent","$root","window","$parent","body","scrollTop","scrollLeft","getURLSearchParams","url","location","search","match","reduce","a","v","index","getPreviousSibling","previousElementSibling","getPreviousSiblings","prev","$sibling","push","getNextSibling","nextElementSibling","getNextSiblings","next","getSiblings","includeSelf","list","getViewportHeight","Math","max","clientHeight","innerHeight","getViewportWidth","clientWidth","innerWidth","isMatched","siblings","isText","isNumber","pixel","split","ceil","Number","parse","toURLSearchParams","params","URLSearchParams","decodeURIComponent","copyToClipboard","$body","selected","getSelection","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange","createAndDownloadFile","fileName","content","$blob","Blob","download","href","URL","createObjectURL","click","revokeObjectURL","closest","ctx","includeCTX","context","startsWith","byClass","byId","id","find","findAll","has","getURLProps","protocol","username","password","hostname","port","pathname","path","hash","origin","getURLSearchParamByName","target","sibling","j","inBounding","parent","parentRect","childRect","getBoundingClientRect","top","right","bottom","left","inViewport","rect","vh","vw","openURL","$anchor","serialize","formElement","isParams","data","serialized","FormData","toREM","pixels","digits","base","parseFloat","size","toFixed","toPixels","rem","_HSLToRGB","h","s","k","n","min","f","toHex","color","hex","rgb","r","g","b","parseInt","toRGB","getColor","isHex","toHSL","insertAfter","reference","$nextSibling","insertBefore","_insertAdjacentHTML","position","dangerouslyUseHTMLString","insertHTML","insertAdjacentHTML","CHARTS","encodeHTML","insertAdjacentText","insertHTMLAfterEnd","insertHTMLBeforeBegin","insertHTMLBeforeEnd","before","setStyle","hide","$replace","replaceWith","show","insertHTMLAfterBegin","$target","lastChild","prepend","firstChild","after","unwrap","$collection","$node","wrap","wrapElement","$temp","$return","outerHTML","wrapAll","$first","warpHTML","wrapInner","wrapHTML","isBrowser","includes","isDeno","Deno","core","e","isNode","process","versions","node","isMobile","ua","navigator","userAgent","isWebKit","browser","name","major","version","substring","lastIndexOf","appName","isNaN","appVersion","os","platform","getOffsetLeft","offsetLeft","getOffsetTop","offsetTop","getOffset","width","height","offsetWidth","offsetHeight","getDocumentScrollLeft","$document","getPageX","floor","box","pageX","getDocumentScrollTop","getPageY","pageY","getPageXY","y","getScrollLeft","undefined","scrollX","getScrollTop","scrollY","getScrollTotalLeft","getScrollTotalTop","offset","easeInQuad","getScroll","getScrollTotal","positions","scrollTo","direction","afterStop","scrollValue","step","distance","MAX_VALUE","scrollHeight","scrollWidth","MAX_POSITION","stop","pos","play","requestAnimationFrame","getNextSiblingBy","getPreviousSiblingBy","nextBy","prevBy","nextAll","prevAll","_getElementSizes","marginTop","marginBottom","marginLeft","marginRight","borderTop","borderBottom","borderLeft","borderRight","paddingTop","paddingBottom","paddingLeft","paddingRight","offsetSize","outerHeight","includeMargin","outerWidth","getDocumentHeight","getDocumentWidth","getScreenHeight","screen","getScreenWidth","getScrollbarWidth","sizes","elSizes","margin","border","padding","getStyles","styles","setStyles","rules","getProperty","getPropertyValue","setProperty","injectCSS","cssRules","$style","head","css","Attributes","Base","Color","Insertion","Platform","Position","Sibling","Size","Style"],"mappings":"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B,UAATvB,EAAmB,WAAa2C,EAAQ3C,GAExCgD,iBAAiBjD,GAAIwB,GAAI,ECtB5B0B,EAAO,CACX,IACA,OACA,UACA,OACA,UACA,QACA,QACA,IACA,OACA,MACA,MACA,aACA,OACA,KACA,SACA,SACA,UACA,OACA,OACA,MACA,WACA,OACA,WACA,KACA,MACA,UACA,MACA,SACA,MACA,KACA,KACA,KACA,QACA,WACA,aACA,SACA,SACA,OACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,SACA,KACA,OACA,IACA,SACA,MACA,QACA,MACA,MACA,QACA,SACA,KACA,OACA,OACA,MACA,OACA,OACA,OACA,WACA,OACA,QACA,MACA,WACA,SACA,KACA,WACA,SACA,SACA,IACA,QACA,UACA,MACA,WACA,IACA,KACA,KACA,KACA,MACA,OACA,IACA,OACA,SACA,SACA,UACA,SACA,OACA,QACA,SACA,OACA,SACA,QACA,MACA,UACA,MACA,MACA,QACA,QACA,KACA,WACA,WACA,QACA,KACA,QACA,OACA,QACA,KACA,QACA,IACA,KACA,MACA,QACA,OCzGIC,EAAU9E,IACd,IAAI+E,EACAC,EACAC,EAEJ,QAAKlF,EAASC,KAKd+E,EAAOb,EAAKlE,GAAKkF,MAAM,EAAG,KAC1BF,EAAQ,4DACRC,EAAO,IAAIpB,OAAOgB,EAAKM,KAAKC,GAAQ,IAAIA,eAAgBC,KAAK,KAAM,KAE5DL,EAAMM,KAAKP,IAASE,EAAKK,KAAKP,GAAI,ECtBrCQ,EAAgBvF,GACbA,EAAImE,QAAQ,+BAAgC,ICC/CqB,EAAoB7D,MACdlC,EAASkC,IAAwB,sBAAjBxC,EAASwC,ICN/B8D,EAAcC,MAEhBjG,EAASiG,IAAoC,8BAAvBvG,EAASuG,ICF7BC,EAAchE,MAEhBlC,EAASkC,MACS,kBAAjBxC,EAASwC,IAA4BA,EAAG9B,SAA2B,IAAhB8B,EAAG7B,WCArD8F,EAASjE,MAEXlC,EAASkC,MACRhC,EAAUgC,IAAO6D,EAAiB7D,IAAO8D,EAAW9D,IAAOgE,EAAWhE,KCGrEkE,EA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"}