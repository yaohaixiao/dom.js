section.section
  header.section__header
    h3.section__h3 clone(el[, deep])
  div.section__content
    dl.section__dl
      dt.section__dt Category：
      dd.section__dd Base
    p clone() 方法用来创建给定 DOM 元素的副本。
    h4.section__h4 Parameters
    h5.section__h4 el
    dl.section__dl
      dt.section__dt Type：
      dd.section__dd HTMLElement
    p （必须）要克隆的 DOM 元素。
    h5.section__h4 deep
    dl.section__dl
      dt.section__dt Type：
      dd.section__dd Boolean
    dl.section__dl
      dt.section__dt Default：
      dd.section__dd false
    p （可选）是否深度可浓。
    ul
      li false：（默认值）仅克隆指定 DOM 元素，不会可能其包含的子元素；
      li true：克隆指定元素，并且也会克隆其子元素；
    h5.section__h4 Returns
    dl.section__dl
      dt.section__dt Type：
      dd.section__dd HTMLElement
    p 返回克隆的 DOM 元素。
    pre.section__pre
      code.section__code.
        &lt;ul id="list" class="list"&gt;
            &lt;li id="home" class="item active"&gt;Home&lt;/li&gt;
            &lt;li class="item"&gt;Blog&lt;/li&gt;
            &lt;li class="item"&gt;Projects&lt;/li&gt;
            &lt;li class="item"&gt;About&lt;/li&gt;
        &lt;/ul&gt;

        // 引入 DOM 模块（中的所有工具方法）
        import DOM from '@yaohaixiao/dom.js/dom
        // 引用 clone 单个方法
        import clone from '@yaohaixiao/dom.js/clone'

        const $list = DOM.byId('#list')
        const $clone = DOM.clone($list)

        // 潜拷贝 $list，不会拷贝其子元素
        const $active = DOM.byClass('.active', $clone) // => null

        // 采用深拷贝 $list，则会拷贝其子元素，因此可以查询到其子元素
        const $current = clone($list, true).querySelector('.active')
        // -> &lt;li id="home" class="item active"&gt;Home&lt;/li&gt;
