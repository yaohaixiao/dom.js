export default DOM;
declare const DOM: {
    copyToClipboard: (str: string) => void;
    createAndDownloadFile: (fileName: string, content: string | Blob) => void;
    fullscreen: (mode?: boolean, el?: string) => void;
    getSelectedText: () => string;
    getURLProps: (url?: string) => any;
    getURLSearchParams: (url?: string) => any;
    getURLSearchParamByName: (prop: string) => string;
    openURL: (url: any, target?: string) => void;
    pixel: (val: string | number) => string | number | boolean | any[];
    onClickOutside: (el: HTMLElement, callback: Function) => boolean;
    redirect: (url: string, asLink?: boolean) => void;
    serialize: (formElement: HTMLElement, isParams?: boolean) => {};
    toREM: (pixels: string | number, digits?: number) => string;
    toPixels: (rem: any, digits?: number) => string;
    toURLSearchParams: (o: any) => string;
    getStyle: (el: HTMLElement, attr: string) => string | boolean;
    setStyle: (el: HTMLElement, attr: string, val: string) => boolean;
    getStyles: (el: HTMLElement, attrs?: any[]) => any;
    setStyles: (el: HTMLElement, styles: any) => boolean;
    getProperty: (prop: string) => string;
    setProperty: (prop: string, value: string) => boolean;
    css: (el: HTMLElement, attr: any, value?: string) => any;
    prop: (prop: string, value?: string) => any;
    show: (el: HTMLElement) => boolean;
    hide: (el: HTMLElement) => boolean;
    toggle: (el: HTMLElement) => boolean;
    getViewportHeight: () => number;
    getViewportWidth: () => number;
    getDocumentHeight: () => number;
    getDocumentWidth: () => number;
    getScreenHeight: () => number;
    getScreenWidth: () => number;
    getScrollbarWidth: (el: any) => number;
    innerHeight: (el: HTMLElement, val?: number | Function) => any;
    innerWidth: (el: HTMLElement, val?: number | Function) => any;
    outerHeight: (el: HTMLElement, val?: string | number | boolean | Function, includeMargin?: boolean) => any;
    outerWidth: (el: HTMLElement, val?: string | number | boolean | Function, includeMargin?: boolean) => any;
    height: (el: HTMLElement, val?: string | number) => any;
    width: (el: HTMLElement, val?: string | number) => any;
    sizes: (el: HTMLElement) => any;
    getNextSibling: (el: HTMLElement | Text, isElementSibling?: boolean) => HTMLElement;
    getPreviousSibling: (el: HTMLElement | Text, isElementSibling?: boolean) => HTMLElement;
    getNextSiblingBy: (el: HTMLElement | Text, filter: string | Function) => HTMLElement;
    getPreviousSiblingBy: (el: HTMLElement | Text, filter: string | Function) => HTMLElement;
    getNextSiblings: (el: HTMLElement | Text, isElementSibling?: boolean) => any[];
    getPreviousSiblings: (el: HTMLElement | Text, isElementSibling?: boolean) => any[];
    getSiblings: (el: HTMLElement | Text, includeSelf?: boolean, isElementSibling?: boolean) => any[];
    next: (el: HTMLElement | Text, isElementSibling?: boolean) => Element;
    prev: (el: HTMLElement | Text, isElementSibling?: boolean) => Element;
    nextBy: (el: HTMLElement | Text, filter: string | Function) => HTMLElement;
    prevBy: (el: HTMLElement | Text, filter: string | Function) => Element;
    nextAll: (el: HTMLElement | Text, isElementSibling?: boolean) => any[];
    prevAll: (el: HTMLElement | Text, isElementSibling?: boolean) => any[];
    siblings: (el: HTMLElement | Text, includeSelf?: boolean, isElementSibling?: boolean) => any[];
    injectCSS: (cssRules: string, media?: string, charset?: string) => HTMLElement;
    loadCSS: (cssURL: string, media?: string) => Promise<any>;
    loadScript: (jsURL: string) => Promise<any>;
    dnsPrefetch: (domain: string) => boolean;
    prefetch: (url?: string) => boolean;
    preload: (url: string, options?: {
        as: string;
        type: string;
        media?: string;
        crossorigin?: string;
    }) => boolean;
    getOffset: (el: HTMLElement) => any;
    getOffsetLeft: (el: HTMLElement) => number;
    getOffsetTop: (el: HTMLElement) => number;
    getPageXY: (el: HTMLElement) => any;
    getPageX: (el: HTMLElement) => number | boolean;
    getPageY: (el: HTMLElement) => number | boolean;
    getDocumentScrollLeft: (doc?: Document) => number;
    getDocumentScrollTop: (doc?: Document) => number;
    getScroll: (el?: any) => any;
    getScrollLeft: (el?: any) => number;
    getScrollTop: (el?: any) => number;
    getScrollTotal: (el?: HTMLElement | Window) => any;
    getScrollTotalLeft: (el: any) => any[];
    getScrollTotalTop: (el: any) => any[];
    offset: (el: any) => any;
    positions: (el: HTMLElement) => any;
    scrollTo: (el: string | HTMLElement, position: number, direction?: string | Function, afterStop?: Function) => void;
    isBrowser: () => boolean;
    isDeno: () => boolean;
    isNodeJs: () => boolean;
    isMobile: () => boolean;
    isWebKit: () => string | boolean;
    browser: () => {
        major: number;
        name: string;
        version: string;
    };
    os: () => {
        name: string;
        version: string;
    };
    observeIntersections: (el: HTMLElement, fn: Function, props?: {
        selector?: string;
        context?: any;
        root?: any;
        thresholds?: any[];
        intersectionRatio?: number;
        rootMargin?: string;
    }) => IntersectionObserver;
    observeMutations: (el: HTMLElement, fn: Function, props?: {
        childList?: boolean;
        attributes?: boolean;
        attributeOldValue?: boolean;
        caracterData?: boolean;
        caracterDataOldValue?: boolean;
        subtree?: boolean;
    }) => MutationObserver;
    observeResize: (el: HTMLElement, callback: Function, delay?: number) => boolean | ResizeObserver;
    insertAfter: (el: Element, reference: HTMLElement) => HTMLElement;
    insertBefore: (el: Element, reference: Element) => Element;
    insertHTMLAfterBegin: (el: string | HTMLElement, str: string, dangerouslyUseHTMLString?: boolean) => Element;
    insertHTMLAfterEnd: (el: string | HTMLElement, str: string, dangerouslyUseHTMLString?: boolean) => Element;
    insertHTMLBeforeBegin: (el: string | HTMLElement, str: string, dangerouslyUseHTMLString?: boolean) => Element;
    insertHTMLBeforeEnd: (el: string | HTMLElement, str: string, dangerouslyUseHTMLString?: boolean) => Element;
    append: (el: string | HTMLElement, reference: HTMLElement) => Element | Text;
    prepend: (el: string | HTMLElement, reference: HTMLElement) => Element | Text;
    after: (el: string | HTMLElement, reference: HTMLElement) => Element;
    before: (el: string | HTMLElement, reference: HTMLElement) => Element;
    replace: (el: string | HTMLElement, reference: HTMLElement) => Element;
    remove: (el: string | HTMLElement) => boolean;
    unwrap: (collection: HTMLCollection | NodeList, selector: string) => boolean;
    wrap: (collection: HTMLCollection | NodeList, wrapElement: string | Function | HTMLElement) => boolean;
    wrapAll: (collection: HTMLCollection | NodeList, wrapElement: string | Function | HTMLElement) => boolean;
    wrapInner: (collection: HTMLCollection | NodeList, wrapElement: string | Function | HTMLElement) => boolean;
    getBoundingClientRect: (el: HTMLElement, includeScale?: boolean, isFixedStrategy?: boolean) => any;
    getDocumentRect: (el: HTMLElement) => any;
    getViewportRect: (el: HTMLElement, strategy: string) => any;
    inBounding: (child: HTMLElement, parent: HTMLElement) => boolean;
    inViewport: (el: HTMLElement) => boolean;
    isCollection: (el: any) => boolean;
    isDOM: (el: any) => boolean;
    isElement: (o: any) => boolean;
    isFragment: (fragment: any) => boolean;
    isNode: (node: Node) => boolean;
    isOverflowElement: (el: HTMLElement) => boolean;
    isShadowRoot: (node: Node) => boolean;
    isTableElement: (el: any) => boolean;
    isText: (el: HTMLElement) => boolean;
    canPosition: (el: HTMLElement) => boolean;
    contains: (el: string | HTMLElement, ancestor: HTMLElement) => boolean;
    inDocument: (el: string | HTMLElement, doc?: any) => boolean;
    isContainingBlock: (el: HTMLElement) => boolean;
    isLayoutViewport: () => boolean;
    isMatched: (el: HTMLElement, filter: string | Function) => boolean;
    isScaled: (el: any) => boolean;
    isWindow: (o: any) => boolean;
    has: (el: HTMLElement | NodeList, selector: string | Function) => any[];
    matches: (el: HTMLElement, selector?: string) => boolean | HTMLElement;
    getColor: (el: HTMLElement, attr: string, isHex?: boolean) => string | boolean;
    randomHexColor: () => string;
    toHex: (color: string) => string | boolean;
    toHSL: (color: string) => string | boolean;
    toRGB: (color: string) => string | boolean;
    build: (str: string) => Element;
    createElement: (tagName: string, attrs?: any, children?: string | any[] | HTMLElement | DocumentFragment) => HTMLElement;
    clone: (el: HTMLElement | Text | HTMLFrameElement, deep?: boolean) => any;
    closest: (el: HTMLElement, selector: string, ctx?: HTMLElement, includeCTX?: boolean) => HTMLElement;
    byClass: (className: string, el?: HTMLElement) => NodeListOf<Element>;
    byId: (id: string, el?: HTMLElement) => HTMLElement;
    getEl: (selector: string, el?: boolean | HTMLElement, multiple?: boolean) => any;
    filter: (collection: NodeList, selector: string | Function) => any[];
    find: (selector: string) => HTMLElement;
    findAll: (selector: string) => any;
    fragment: (innerContent?: string | HTMLElement | Text | HTMLCollection) => DocumentFragment;
    getActiveElement: () => HTMLElement;
    getAncestorBy: (el: HTMLElement, filter: Function) => HTMLElement;
    getAncestorByClassName: (el: HTMLElement, className: string) => HTMLElement;
    getAncestorByTagName: (el: HTMLElement, tagName: string) => HTMLElement;
    getChildren: (el: string | HTMLElement, filter?: boolean | Function) => any[];
    getChildrenBy: (el: HTMLElement, filter: Function) => any[] | HTMLElement[];
    getContainingBlock: (el: any) => any;
    getDocument: (node: any) => HTMLElement;
    getFirstChildBy: (el: HTMLElement, filter: any) => HTMLElement;
    getFirstChild: (el: string | HTMLElement, filter?: Function) => HTMLElement | ChildNode;
    getImages: (el?: string, includeDuplicates?: boolean) => any[];
    getHostOrParent: (el: any) => any;
    getLastChildBy: (el: HTMLElement, filter: Function) => HTMLElement | ChildNode;
    getLastChild: (el: string | HTMLElement, filter?: Function) => HTMLElement | ChildNode;
    getNodeName: (node: any) => string;
    getOffsetParent: (el: HTMLElement) => HTMLElement;
    getTagName: (el: HTMLElement) => string;
    getScrollParent: (el: any) => Document | HTMLElement;
    getWindow: (node: Node | Window) => any;
    getVisualViewport: (el?: HTMLElement) => VisualViewport;
    index: (el: string | HTMLElement, ancestor?: HTMLElement) => number;
    children: (el: HTMLElement, filter: boolean | Function) => any[];
    parent: (el: HTMLElement | Text, type?: string) => any;
    parents: (el: string | HTMLElement | Text, includeSelf?: boolean) => any[];
    getAttribute: (el: HTMLElement, attr: string) => string | boolean;
    setAttribute: (el: HTMLElement, attr: string, value: string | number | boolean) => boolean;
    removeAttribute: (el: HTMLElement, attr: string) => boolean;
    getAttributes: (el: HTMLElement, props?: any[]) => any;
    setAttributes: (el: HTMLElement, attrs: any) => boolean;
    removeAttributes: (el: HTMLElement, attrs: any[]) => boolean;
    getValue: (el: HTMLElement) => string;
    setValue: (el: HTMLElement, val: string | number | boolean) => boolean;
    hasClass: (el: HTMLElement, className: string) => boolean;
    addClass: (el: HTMLElement, className: string) => boolean;
    replaceClass: (el: HTMLElement, oldCls: string, newCls: string) => boolean;
    removeClass: (el: HTMLElement, className: string) => boolean;
    toggleClass: (el: HTMLElement, className: string) => boolean;
    attrs: (el: HTMLElement, attr?: any, value?: any) => any;
    enable: (el: HTMLElement) => boolean;
    disable: (el: HTMLElement) => boolean;
    readonly: (el: any) => boolean;
    html: (el: string | HTMLElement, strHTML?: string) => any;
    text: (el: string | HTMLElement, str?: string) => any;
    val: (el: HTMLElement, value: string | number | boolean) => string;
};
